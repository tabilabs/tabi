syntax = "proto3";
package tabi.captain_node.v1;

import "tabi/captain-node/v1/captain-node.proto";

import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/tabilabs/tabi/x/captain-node/types";
option (gogoproto.goproto_getters_all) = false;

// Msg defines the captain-node Msg service
service Msg {
  // UpdateParams defines a governance operation for updating the x/coinswap
  // module parameters. The authority is defined in the keeper.
  //
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);

  // CommitReport defines a allow list operation for committing a report.
  rpc CommitReport(MsgCommitReport) returns (MsgCommitReportResponse);

  // RewardComputingPower defines a allow list operation for rewarding computing power to a captain node's owner.
  rpc RewardComputingPower(MsgRewardComputingPower) returns (MsgRewardComputingPowerResponse);

  // UpdateSaleLevel defines a allow list operation for updating the sale level.
  rpc UpdateSaleLevel(MsgUpdateSaleLevel) returns (MsgUpdateSaleLevelResponse);

  // AddCaller defines a allow list  operation for registering some callers for mint node.
  rpc AddCaller(MsgAddCaller) returns (MsgAddCallerResponse);

  // RemoveCaller defines a allow list  operation for removing some
  // callers for mint node.
  rpc RemoveCaller(MsgRemoveCaller) returns (MsgRemoveCallerResponse);

  // WithdrawComputingPower defines a user operation for receiving computing power to a captain node.
  rpc WithdrawComputingPower(MsgWithdrawComputingPower) returns (MsgWithdrawComputingPowerResponse);

  // CreateCaptainNode defines a user operation for creating a captain node.
  rpc CreateCaptainNode(MsgCreateCaptainNode) returns (MsgCreateCaptainNodeResponse);

}

// MsgUpdateParams is the Msg/UpdateParams request type.
//
// Since: cosmos-sdk 0.47
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";

  // authority is the address that controls the module (defaults to x/gov unless
  // overwritten).
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  // params defines the x/mint parameters to update.
  //
  // NOTE: All parameters must be supplied.
  Params params = 2 [ (gogoproto.nullable) = false ];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
//
// Since: cosmos-sdk 0.47
message MsgUpdateParamsResponse {}

// MsgCommitReport is the Msg/CommitReport request type.
message MsgCommitReport {
  option (cosmos.msg.v1.signer) = "sender";
  // sender is the address of the owner of nft
  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // captain_node_power_on_periods is the captain node power on periods to update.
  repeated CaptainNodePowerOnPeriod captain_node_power_on_periods = 2;
}

message CaptainNodePowerOnPeriod {
  // power_on_period_rate is the period of time that the captain node is powered on.
  string power_on_period_rate = 1 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (gogoproto.nullable) = false];
  // node_id is the id of the captain node to update power on period.
  string node_id = 2;
}

// MsgCommitReportResponse defines the response structure for executing a
// MsgCommitReport message.
message MsgCommitReportResponse{}

//MsgRewardComputingPower is the Msg/RewardComputingPower request type.
message MsgRewardComputingPower {
  option (cosmos.msg.v1.signer) = "sender";
  // sender is the address of the owner of nft
  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // extractable_computing_powers is the extractable computing powers to reward.
  repeated ExtractableComputingPower extractable_computing_powers = 2;
}

// MsgUpdateUserExperienceResponse defines the response structure for executing a
// MsgUpdateUserExperience message.
message MsgRewardComputingPowerResponse{}

// MsgUpdateSaleLevel is the Msg/UpdateSaleLevel request type.
message MsgUpdateSaleLevel {
  option (cosmos.msg.v1.signer) = "sender";
  // sender is the address of the owner of nft
  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // sale_level is the sale levels to update.
  uint64 sale_level = 2;
}

// MsgUpdateSaleLevelResponse defines the response structure for executing a
// MsgUpdateSaleLevel message.
message MsgUpdateSaleLevelResponse{}

// MsgAddCaller defines a allow list proposal to register some
// callers for mint node.
message MsgAddCaller {
  option (cosmos.msg.v1.signer) = "sender";

  // caller address list
  repeated string callers = 1;
  // authority is the address that controls the module (defaults to x/gov unless
  // overwritten).
  string sender = 2 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

// MsgAddCallerResponse defines the Msg/AddCaller response type.
message MsgAddCallerResponse {}

// MsgRemoveCaller defines a allow list proposal to remove some
// callers for mint node.
message MsgRemoveCaller {
  option (cosmos.msg.v1.signer) = "sender";

  // caller address list
  repeated string callers = 1;
  // authority is the address that controls the module (defaults to x/gov unless
  // overwritten).
  string sender = 2 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

// MsgRemoveCallerResponse defines the Msg/RemoveCaller response type.
message MsgRemoveCallerResponse {}

// MsgWithdrawComputingPower is the Msg/MsgWithdrawComputingPower request type.
message MsgWithdrawComputingPower {
  option (cosmos.msg.v1.signer) = "sender";

  // user is the address that receives the experience.
  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // computing_power_amount is the node to receive computing power amount.
  uint64 computing_power_amount = 2;

  // node_id is the id of the captain node to receive experience.
  string node_id = 3;
}


// MsgWithdrawComputingPowerResponse defines the response structure for executing a
// MsgWithdrawComputingPower message.
message MsgWithdrawComputingPowerResponse{}

// MsgCreateCaptainNode is the Msg/CreateCaptainNode request type.
message MsgCreateCaptainNode {
  option (cosmos.msg.v1.signer) = "sender";
  // sender is the address of the owner of nft
  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // receiver is the receiver address of nft
  string receiver = 2 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  string division_id = 3;
}

// MsgMintResponse defines the response structure for executing a
// MsgMint message.
message MsgCreateCaptainNodeResponse{}




