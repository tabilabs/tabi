syntax = "proto3";
package tabi.captains.v1;

import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";

option go_package = "github.com/tabilabs/tabi/x/captains/types";

// Params defines captains module's parameters
message Params {
    // captains_total_count defines the total count of the captains
    uint64 captains_total_count = 1;
    // minimum_power_on_period defines the minimum period for a captain to be powered on
    uint64 minimum_power_on_period = 2;
    // maximum_power_on_period defines the maximum period for a captain to be powered on
    uint64 maximum_power_on_period = 3;
    // captains_constant is a fixed constant for reward calculation
    uint64 captains_constant = 4;
    // maximum_number_of_holdings defines the maximum number of captain nodes one account can hold.
    uint64 maximum_holding_amount = 5;
    // halving_era defines the halving era coefficient
    uint64 halving_era_coefficient = 6;
    // current_sale_level defines the current level for sale.
    uint64 current_sale_level = 7;
    // authorized members list
    repeated string authorized_members = 8;
}

// Division defines the division a node belongs to.
message Division {
    string id = 1;
    // level defines the level of the node.
    uint64 level = 2;
    // initial_supply defines the initial supply of the node in the division.
    uint64 initial_supply = 3;
    // sold_count defines the total count of the node in the division.
    uint64 sold_count = 4;
    // total_count defines the supply count of nodes in the division.
    uint64 total_count = 5;
    // computing_power_lower_bound defines the low bound of computing power in the division.
    uint64 computing_power_lower_bound = 6;
    // computing_power_upper_bound defines the upper bound of computing power in the division.
    uint64 computing_power_upper_bound = 7;
}

// Node defines the node
message Node {
    string id = 1;
    string division_id = 2;
    string owner = 3;
    uint64 computing_power = 4;
    repeated NodeInfoOnEpoch extras = 5 [(gogoproto.nullable) = false];
}

// EpochInfo defines the epoch information
message Epoch {
    uint64 epoch_id = 1;
    uint64 start_height = 2;
    uint64 end_height = 3;
    uint64 historical_emission_sum = 4;
    uint64 computing_power_sum = 5;
    uint64 pledge_amount_sum = 6;
    EpochState epoch_state = 7 [(gogoproto.nullable) = false];
}

// EpochState defines the epoch state
message EpochState {
    uint64 completed = 1;
    uint64 report_validation_count = 2;
    uint64 computing_power_calculation_count = 3;
    uint64 reward_calculation_count = 4;
}

// NodeInfoOnEpoch defines the node information on the epoch
message NodeInfoOnEpoch {
    uint64 epoch_id = 1;
    uint64 historical_emission = 2;
    uint64 computing_power = 3;
}

// ClaimableComputingPower defines claimable reward of computing power to the owner.
message ClaimableComputingPower {
    uint64 amount = 1;
    string owner = 2 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}
