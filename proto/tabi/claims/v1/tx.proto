syntax = "proto3";
package tabi.claims.v1;

import "tabi/claims/v1/claims.proto";

import "cosmos/base/v1beta1/coin.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/tabilabs/tabi/x/claims/types";
option (gogoproto.goproto_getters_all) = false;

// Msg defines the claims Msg service
service Msg {
  // UpdateParams defines a governance operation for updating the x/claims
  // module parameters. The authority is defined in the keeper.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);

  // WithdrawReward defines a method to withdraw the rewards
  rpc WithdrawReward(MsgWithdrawReward) returns (MsgWithdrawRewardResponse);

  // FundCommunityPool defines a method to allow an account to directly
  // fund the community pool.
  rpc FundCommunityPool(MsgFundCommunityPool) returns (MsgFundCommunityPoolResponse);
}

// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";

  // authority is the address that controls the module (defaults to x/gov unless
  // overwritten).
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // params defines the x/claims parameters to update.
  //
  // NOTE: All parameters must be supplied.
  Params params = 2 [ (gogoproto.nullable) = false ];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

// MsgWithdrawNodeReward represents delegation withdrawal to a delegator
// from a single Node.
message MsgWithdrawReward {
  option (cosmos.msg.v1.signer) = "node_owner_address";

  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  string node_owner_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string node_id = 2;
}

// MsgWithdrawNodeRewardResponse defines the Msg/WithdrawNodeReward response type.
message MsgWithdrawRewardResponse {
  // Since: cosmos-sdk 0.46
  repeated cosmos.base.v1beta1.Coin amount = 1
      [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
}

// MsgFundCommunityPool allows an account to directly
// fund the community pool.
message MsgFundCommunityPool {
  option (cosmos.msg.v1.signer) = "depositor";

  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  repeated cosmos.base.v1beta1.Coin amount = 1
  [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
  string depositor = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// MsgFundCommunityPoolResponse defines the Msg/FundCommunityPool response type.
message MsgFundCommunityPoolResponse {}
