// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tabi/captain-node/v1/events.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// EventCreateCaptainNode is the event for creating captain node
type EventCreateCaptainNode struct {
	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	NodeId     string `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	DivisionId string `protobuf:"bytes,3,opt,name=division_id,json=divisionId,proto3" json:"division_id,omitempty"`
	Owner      string `protobuf:"bytes,4,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *EventCreateCaptainNode) Reset()         { *m = EventCreateCaptainNode{} }
func (m *EventCreateCaptainNode) String() string { return proto.CompactTextString(m) }
func (*EventCreateCaptainNode) ProtoMessage()    {}
func (*EventCreateCaptainNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_f359615061b6a883, []int{0}
}
func (m *EventCreateCaptainNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCreateCaptainNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCreateCaptainNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCreateCaptainNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCreateCaptainNode.Merge(m, src)
}
func (m *EventCreateCaptainNode) XXX_Size() int {
	return m.Size()
}
func (m *EventCreateCaptainNode) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCreateCaptainNode.DiscardUnknown(m)
}

var xxx_messageInfo_EventCreateCaptainNode proto.InternalMessageInfo

func (m *EventCreateCaptainNode) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *EventCreateCaptainNode) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *EventCreateCaptainNode) GetDivisionId() string {
	if m != nil {
		return m.DivisionId
	}
	return ""
}

func (m *EventCreateCaptainNode) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

// EventWithdrawComputingPower is the event for withdrawing computing power
type EventWithdrawComputingPower struct {
	NodeId                        string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	OldDivisionId                 string `protobuf:"bytes,2,opt,name=old_division_id,json=oldDivisionId,proto3" json:"old_division_id,omitempty"`
	NewDivisionId                 string `protobuf:"bytes,3,opt,name=new_division_id,json=newDivisionId,proto3" json:"new_division_id,omitempty"`
	ReceiveComputingPowerAmount   string `protobuf:"bytes,4,opt,name=receive_computing_power_amount,json=receiveComputingPowerAmount,proto3" json:"receive_computing_power_amount,omitempty"`
	RemainingComputingPowerAmount string `protobuf:"bytes,5,opt,name=remaining_computing_power_amount,json=remainingComputingPowerAmount,proto3" json:"remaining_computing_power_amount,omitempty"`
	Sender                        string `protobuf:"bytes,6,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *EventWithdrawComputingPower) Reset()         { *m = EventWithdrawComputingPower{} }
func (m *EventWithdrawComputingPower) String() string { return proto.CompactTextString(m) }
func (*EventWithdrawComputingPower) ProtoMessage()    {}
func (*EventWithdrawComputingPower) Descriptor() ([]byte, []int) {
	return fileDescriptor_f359615061b6a883, []int{1}
}
func (m *EventWithdrawComputingPower) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventWithdrawComputingPower) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventWithdrawComputingPower.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventWithdrawComputingPower) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventWithdrawComputingPower.Merge(m, src)
}
func (m *EventWithdrawComputingPower) XXX_Size() int {
	return m.Size()
}
func (m *EventWithdrawComputingPower) XXX_DiscardUnknown() {
	xxx_messageInfo_EventWithdrawComputingPower.DiscardUnknown(m)
}

var xxx_messageInfo_EventWithdrawComputingPower proto.InternalMessageInfo

func (m *EventWithdrawComputingPower) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *EventWithdrawComputingPower) GetOldDivisionId() string {
	if m != nil {
		return m.OldDivisionId
	}
	return ""
}

func (m *EventWithdrawComputingPower) GetNewDivisionId() string {
	if m != nil {
		return m.NewDivisionId
	}
	return ""
}

func (m *EventWithdrawComputingPower) GetReceiveComputingPowerAmount() string {
	if m != nil {
		return m.ReceiveComputingPowerAmount
	}
	return ""
}

func (m *EventWithdrawComputingPower) GetRemainingComputingPowerAmount() string {
	if m != nil {
		return m.RemainingComputingPowerAmount
	}
	return ""
}

func (m *EventWithdrawComputingPower) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

// EventCommitReport is the event for committing report
type EventCommitReport struct {
	NodeId           string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	OldPowerOnPeriod string `protobuf:"bytes,2,opt,name=old_power_on_period,json=oldPowerOnPeriod,proto3" json:"old_power_on_period,omitempty"`
	NewPowerOnPeriod string `protobuf:"bytes,3,opt,name=new_power_on_period,json=newPowerOnPeriod,proto3" json:"new_power_on_period,omitempty"`
	Sender           string `protobuf:"bytes,4,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *EventCommitReport) Reset()         { *m = EventCommitReport{} }
func (m *EventCommitReport) String() string { return proto.CompactTextString(m) }
func (*EventCommitReport) ProtoMessage()    {}
func (*EventCommitReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_f359615061b6a883, []int{2}
}
func (m *EventCommitReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCommitReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCommitReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCommitReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCommitReport.Merge(m, src)
}
func (m *EventCommitReport) XXX_Size() int {
	return m.Size()
}
func (m *EventCommitReport) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCommitReport.DiscardUnknown(m)
}

var xxx_messageInfo_EventCommitReport proto.InternalMessageInfo

func (m *EventCommitReport) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *EventCommitReport) GetOldPowerOnPeriod() string {
	if m != nil {
		return m.OldPowerOnPeriod
	}
	return ""
}

func (m *EventCommitReport) GetNewPowerOnPeriod() string {
	if m != nil {
		return m.NewPowerOnPeriod
	}
	return ""
}

func (m *EventCommitReport) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func init() {
	proto.RegisterType((*EventCreateCaptainNode)(nil), "tabi.captain_node.v1.EventCreateCaptainNode")
	proto.RegisterType((*EventWithdrawComputingPower)(nil), "tabi.captain_node.v1.EventWithdrawComputingPower")
	proto.RegisterType((*EventCommitReport)(nil), "tabi.captain_node.v1.EventCommitReport")
}

func init() { proto.RegisterFile("tabi/captain-node/v1/events.proto", fileDescriptor_f359615061b6a883) }

var fileDescriptor_f359615061b6a883 = []byte{
	// 416 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0x63, 0xd3, 0x1a, 0xb1, 0xa8, 0xb4, 0x98, 0xaa, 0x58, 0xaa, 0x30, 0x25, 0x87, 0x8a,
	0x4b, 0x6c, 0x55, 0x3c, 0x01, 0x18, 0x54, 0xf5, 0x02, 0x55, 0x2f, 0x48, 0x5c, 0x56, 0x6b, 0xef,
	0x28, 0x59, 0xc9, 0xde, 0xb1, 0xd6, 0x1b, 0x3b, 0xbc, 0x05, 0xcf, 0xc0, 0x99, 0x07, 0xe1, 0x98,
	0x23, 0x47, 0x94, 0xbc, 0x08, 0xda, 0xdd, 0x84, 0xd8, 0xd0, 0xdc, 0x32, 0x33, 0xdf, 0xce, 0xff,
	0xe7, 0xf7, 0x90, 0x57, 0x9a, 0xe5, 0x22, 0x2d, 0x58, 0xad, 0x99, 0x90, 0x13, 0x89, 0x1c, 0xd2,
	0xf6, 0x2a, 0x85, 0x16, 0xa4, 0x6e, 0x92, 0x5a, 0xa1, 0xc6, 0xf0, 0xd4, 0x20, 0xc9, 0x06, 0xa1,
	0x06, 0x49, 0xda, 0xab, 0xf1, 0x82, 0x9c, 0x7d, 0x30, 0x54, 0xa6, 0x80, 0x69, 0xc8, 0xdc, 0xf4,
	0x23, 0x72, 0x08, 0x9f, 0x10, 0x5f, 0xf0, 0xc8, 0xbb, 0xf0, 0x5e, 0x3f, 0xba, 0xf3, 0x05, 0x0f,
	0x9f, 0x93, 0x87, 0xe6, 0x11, 0x15, 0x3c, 0xf2, 0x6d, 0x33, 0x30, 0xe5, 0x0d, 0x0f, 0x5f, 0x92,
	0xc7, 0x5c, 0xb4, 0xa2, 0x11, 0x28, 0xcd, 0xf0, 0x81, 0x1d, 0x92, 0x6d, 0xeb, 0x86, 0x87, 0xa7,
	0xe4, 0x10, 0x3b, 0x09, 0x2a, 0x3a, 0xb0, 0x23, 0x57, 0x8c, 0x7f, 0xf8, 0xe4, 0xdc, 0x4a, 0x7f,
	0x16, 0x7a, 0xc6, 0x15, 0xeb, 0x32, 0xac, 0xea, 0xb9, 0x16, 0x72, 0x7a, 0x8b, 0x1d, 0xa8, 0xbe,
	0x9e, 0x37, 0xd0, 0xbb, 0x24, 0xc7, 0x58, 0x72, 0xda, 0xd7, 0x74, 0x86, 0x8e, 0xb0, 0xe4, 0xef,
	0x77, 0xb2, 0x97, 0xe4, 0x58, 0x42, 0x47, 0xff, 0xf7, 0x76, 0x24, 0xa1, 0xeb, 0x71, 0x19, 0x89,
	0x15, 0x14, 0x20, 0x5a, 0xa0, 0xc5, 0xd6, 0x02, 0xad, 0x8d, 0x07, 0xca, 0x2a, 0x9c, 0x4b, 0xbd,
	0xf1, 0x7d, 0xbe, 0xa1, 0x86, 0x3e, 0xdf, 0x5a, 0x24, 0xbc, 0x26, 0x17, 0x0a, 0x2a, 0x26, 0xa4,
	0x79, 0xbc, 0x67, 0xcd, 0xa1, 0x5d, 0xf3, 0xe2, 0x2f, 0x77, 0xef, 0xa2, 0x33, 0x12, 0x34, 0x20,
	0x39, 0xa8, 0x28, 0x70, 0xff, 0xda, 0x55, 0xe3, 0xef, 0x1e, 0x79, 0xea, 0xbe, 0x14, 0x56, 0x95,
	0xd0, 0x77, 0x50, 0xa3, 0xd2, 0xfb, 0x43, 0x9a, 0x90, 0x67, 0x26, 0x24, 0xa7, 0x8f, 0x92, 0xd6,
	0xa0, 0x04, 0x6e, 0x83, 0x3a, 0xc1, 0x92, 0x5b, 0xcd, 0x4f, 0xf2, 0xd6, 0xf6, 0x0d, 0x6e, 0xb2,
	0xfa, 0x17, 0x77, 0x79, 0x9d, 0x48, 0xe8, 0x86, 0xf8, 0xce, 0xe4, 0x41, 0xdf, 0xe4, 0xbb, 0xeb,
	0x9f, 0xab, 0xd8, 0x5b, 0xae, 0x62, 0xef, 0xf7, 0x2a, 0xf6, 0xbe, 0xad, 0xe3, 0xd1, 0x72, 0x1d,
	0x8f, 0x7e, 0xad, 0xe3, 0xd1, 0x97, 0xc9, 0x54, 0xe8, 0xd9, 0x3c, 0x4f, 0x0a, 0xac, 0x52, 0x73,
	0x88, 0x25, 0xcb, 0x1b, 0xfb, 0x23, 0x5d, 0x0c, 0xcf, 0x56, 0x7f, 0xad, 0xa1, 0xc9, 0x03, 0x7b,
	0xb3, 0x6f, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0x83, 0xb0, 0x48, 0xcc, 0xd8, 0x02, 0x00, 0x00,
}

func (m *EventCreateCaptainNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCreateCaptainNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCreateCaptainNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DivisionId) > 0 {
		i -= len(m.DivisionId)
		copy(dAtA[i:], m.DivisionId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.DivisionId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NodeId) > 0 {
		i -= len(m.NodeId)
		copy(dAtA[i:], m.NodeId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.NodeId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventWithdrawComputingPower) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventWithdrawComputingPower) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventWithdrawComputingPower) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.RemainingComputingPowerAmount) > 0 {
		i -= len(m.RemainingComputingPowerAmount)
		copy(dAtA[i:], m.RemainingComputingPowerAmount)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RemainingComputingPowerAmount)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ReceiveComputingPowerAmount) > 0 {
		i -= len(m.ReceiveComputingPowerAmount)
		copy(dAtA[i:], m.ReceiveComputingPowerAmount)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ReceiveComputingPowerAmount)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.NewDivisionId) > 0 {
		i -= len(m.NewDivisionId)
		copy(dAtA[i:], m.NewDivisionId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.NewDivisionId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OldDivisionId) > 0 {
		i -= len(m.OldDivisionId)
		copy(dAtA[i:], m.OldDivisionId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.OldDivisionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NodeId) > 0 {
		i -= len(m.NodeId)
		copy(dAtA[i:], m.NodeId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.NodeId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventCommitReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCommitReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCommitReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.NewPowerOnPeriod) > 0 {
		i -= len(m.NewPowerOnPeriod)
		copy(dAtA[i:], m.NewPowerOnPeriod)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.NewPowerOnPeriod)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OldPowerOnPeriod) > 0 {
		i -= len(m.OldPowerOnPeriod)
		copy(dAtA[i:], m.OldPowerOnPeriod)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.OldPowerOnPeriod)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.NodeId) > 0 {
		i -= len(m.NodeId)
		copy(dAtA[i:], m.NodeId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.NodeId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventCreateCaptainNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.NodeId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.DivisionId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventWithdrawComputingPower) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NodeId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.OldDivisionId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.NewDivisionId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.ReceiveComputingPowerAmount)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.RemainingComputingPowerAmount)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventCommitReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NodeId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.OldPowerOnPeriod)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.NewPowerOnPeriod)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventCreateCaptainNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCreateCaptainNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCreateCaptainNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DivisionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DivisionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventWithdrawComputingPower) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventWithdrawComputingPower: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventWithdrawComputingPower: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldDivisionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OldDivisionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewDivisionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewDivisionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiveComputingPowerAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceiveComputingPowerAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainingComputingPowerAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemainingComputingPowerAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCommitReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCommitReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCommitReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldPowerOnPeriod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OldPowerOnPeriod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewPowerOnPeriod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewPowerOnPeriod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
