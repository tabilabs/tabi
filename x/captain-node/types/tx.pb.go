// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tabi/captain-node/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgUpdateParams is the Msg/UpdateParams request type.
//
// Since: cosmos-sdk 0.47
type MsgUpdateParams struct {
	// authority is the address that controls the module (defaults to x/gov unless
	// overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// params defines the x/mint parameters to update.
	//
	// NOTE: All parameters must be supplied.
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f8a53908bdb279a, []int{0}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
//
// Since: cosmos-sdk 0.47
type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f8a53908bdb279a, []int{1}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

// MsgCommitReport is the Msg/CommitReport request type.
type MsgCommitReport struct {
	// sender is the address of the owner of nft
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// captain_node_power_on_periods is the captain node power on periods to update.
	CaptainNodePowerOnPeriods []*CaptainNodePowerOnPeriod `protobuf:"bytes,2,rep,name=captain_node_power_on_periods,json=captainNodePowerOnPeriods,proto3" json:"captain_node_power_on_periods,omitempty"`
}

func (m *MsgCommitReport) Reset()         { *m = MsgCommitReport{} }
func (m *MsgCommitReport) String() string { return proto.CompactTextString(m) }
func (*MsgCommitReport) ProtoMessage()    {}
func (*MsgCommitReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f8a53908bdb279a, []int{2}
}
func (m *MsgCommitReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCommitReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCommitReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCommitReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCommitReport.Merge(m, src)
}
func (m *MsgCommitReport) XXX_Size() int {
	return m.Size()
}
func (m *MsgCommitReport) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCommitReport.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCommitReport proto.InternalMessageInfo

type CaptainNodePowerOnPeriod struct {
	// power_on_period_rate is the period of time that the captain node is powered on.
	PowerOnPeriodRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=power_on_period_rate,json=powerOnPeriodRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"power_on_period_rate"`
	// node_id is the id of the captain node to update power on period.
	NodeId string `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
}

func (m *CaptainNodePowerOnPeriod) Reset()         { *m = CaptainNodePowerOnPeriod{} }
func (m *CaptainNodePowerOnPeriod) String() string { return proto.CompactTextString(m) }
func (*CaptainNodePowerOnPeriod) ProtoMessage()    {}
func (*CaptainNodePowerOnPeriod) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f8a53908bdb279a, []int{3}
}
func (m *CaptainNodePowerOnPeriod) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CaptainNodePowerOnPeriod) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CaptainNodePowerOnPeriod.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CaptainNodePowerOnPeriod) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CaptainNodePowerOnPeriod.Merge(m, src)
}
func (m *CaptainNodePowerOnPeriod) XXX_Size() int {
	return m.Size()
}
func (m *CaptainNodePowerOnPeriod) XXX_DiscardUnknown() {
	xxx_messageInfo_CaptainNodePowerOnPeriod.DiscardUnknown(m)
}

var xxx_messageInfo_CaptainNodePowerOnPeriod proto.InternalMessageInfo

// MsgCommitReportResponse defines the response structure for executing a
// MsgCommitReport message.
type MsgCommitReportResponse struct {
}

func (m *MsgCommitReportResponse) Reset()         { *m = MsgCommitReportResponse{} }
func (m *MsgCommitReportResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCommitReportResponse) ProtoMessage()    {}
func (*MsgCommitReportResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f8a53908bdb279a, []int{4}
}
func (m *MsgCommitReportResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCommitReportResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCommitReportResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCommitReportResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCommitReportResponse.Merge(m, src)
}
func (m *MsgCommitReportResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCommitReportResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCommitReportResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCommitReportResponse proto.InternalMessageInfo

//MsgRewardComputingPower is the Msg/RewardComputingPower request type.
type MsgRewardComputingPower struct {
	// sender is the address of the owner of nft
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// extractable_computing_powers is the extractable computing powers to reward.
	ExtractableComputingPowers []*ExtractableComputingPower `protobuf:"bytes,2,rep,name=extractable_computing_powers,json=extractableComputingPowers,proto3" json:"extractable_computing_powers,omitempty"`
}

func (m *MsgRewardComputingPower) Reset()         { *m = MsgRewardComputingPower{} }
func (m *MsgRewardComputingPower) String() string { return proto.CompactTextString(m) }
func (*MsgRewardComputingPower) ProtoMessage()    {}
func (*MsgRewardComputingPower) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f8a53908bdb279a, []int{5}
}
func (m *MsgRewardComputingPower) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRewardComputingPower) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRewardComputingPower.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRewardComputingPower) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRewardComputingPower.Merge(m, src)
}
func (m *MsgRewardComputingPower) XXX_Size() int {
	return m.Size()
}
func (m *MsgRewardComputingPower) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRewardComputingPower.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRewardComputingPower proto.InternalMessageInfo

// MsgUpdateUserExperienceResponse defines the response structure for executing a
// MsgUpdateUserExperience message.
type MsgRewardComputingPowerResponse struct {
}

func (m *MsgRewardComputingPowerResponse) Reset()         { *m = MsgRewardComputingPowerResponse{} }
func (m *MsgRewardComputingPowerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRewardComputingPowerResponse) ProtoMessage()    {}
func (*MsgRewardComputingPowerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f8a53908bdb279a, []int{6}
}
func (m *MsgRewardComputingPowerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRewardComputingPowerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRewardComputingPowerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRewardComputingPowerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRewardComputingPowerResponse.Merge(m, src)
}
func (m *MsgRewardComputingPowerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRewardComputingPowerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRewardComputingPowerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRewardComputingPowerResponse proto.InternalMessageInfo

// MsgUpdateSaleLevel is the Msg/UpdateSaleLevel request type.
type MsgUpdateSaleLevel struct {
	// sender is the address of the owner of nft
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// sale_level is the sale levels to update.
	SaleLevel uint64 `protobuf:"varint,2,opt,name=sale_level,json=saleLevel,proto3" json:"sale_level,omitempty"`
}

func (m *MsgUpdateSaleLevel) Reset()         { *m = MsgUpdateSaleLevel{} }
func (m *MsgUpdateSaleLevel) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateSaleLevel) ProtoMessage()    {}
func (*MsgUpdateSaleLevel) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f8a53908bdb279a, []int{7}
}
func (m *MsgUpdateSaleLevel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateSaleLevel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateSaleLevel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateSaleLevel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateSaleLevel.Merge(m, src)
}
func (m *MsgUpdateSaleLevel) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateSaleLevel) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateSaleLevel.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateSaleLevel proto.InternalMessageInfo

// MsgUpdateSaleLevelResponse defines the response structure for executing a
// MsgUpdateSaleLevel message.
type MsgUpdateSaleLevelResponse struct {
}

func (m *MsgUpdateSaleLevelResponse) Reset()         { *m = MsgUpdateSaleLevelResponse{} }
func (m *MsgUpdateSaleLevelResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateSaleLevelResponse) ProtoMessage()    {}
func (*MsgUpdateSaleLevelResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f8a53908bdb279a, []int{8}
}
func (m *MsgUpdateSaleLevelResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateSaleLevelResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateSaleLevelResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateSaleLevelResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateSaleLevelResponse.Merge(m, src)
}
func (m *MsgUpdateSaleLevelResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateSaleLevelResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateSaleLevelResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateSaleLevelResponse proto.InternalMessageInfo

// MsgAddCaller defines a allow list proposal to register some
// callers for mint node.
type MsgAddCaller struct {
	// caller address list
	Callers []string `protobuf:"bytes,1,rep,name=callers,proto3" json:"callers,omitempty"`
	// authority is the address that controls the module (defaults to x/gov unless
	// overwritten).
	Sender string `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgAddCaller) Reset()         { *m = MsgAddCaller{} }
func (m *MsgAddCaller) String() string { return proto.CompactTextString(m) }
func (*MsgAddCaller) ProtoMessage()    {}
func (*MsgAddCaller) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f8a53908bdb279a, []int{9}
}
func (m *MsgAddCaller) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddCaller) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddCaller.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddCaller) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddCaller.Merge(m, src)
}
func (m *MsgAddCaller) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddCaller) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddCaller.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddCaller proto.InternalMessageInfo

// MsgAddCallerResponse defines the Msg/AddCaller response type.
type MsgAddCallerResponse struct {
}

func (m *MsgAddCallerResponse) Reset()         { *m = MsgAddCallerResponse{} }
func (m *MsgAddCallerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddCallerResponse) ProtoMessage()    {}
func (*MsgAddCallerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f8a53908bdb279a, []int{10}
}
func (m *MsgAddCallerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddCallerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddCallerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddCallerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddCallerResponse.Merge(m, src)
}
func (m *MsgAddCallerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddCallerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddCallerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddCallerResponse proto.InternalMessageInfo

// MsgRemoveCaller defines a allow list proposal to remove some
// callers for mint node.
type MsgRemoveCaller struct {
	// caller address list
	Callers []string `protobuf:"bytes,1,rep,name=callers,proto3" json:"callers,omitempty"`
	// authority is the address that controls the module (defaults to x/gov unless
	// overwritten).
	Sender string `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgRemoveCaller) Reset()         { *m = MsgRemoveCaller{} }
func (m *MsgRemoveCaller) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveCaller) ProtoMessage()    {}
func (*MsgRemoveCaller) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f8a53908bdb279a, []int{11}
}
func (m *MsgRemoveCaller) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveCaller) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveCaller.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveCaller) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveCaller.Merge(m, src)
}
func (m *MsgRemoveCaller) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveCaller) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveCaller.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveCaller proto.InternalMessageInfo

// MsgRemoveCallerResponse defines the Msg/RemoveCaller response type.
type MsgRemoveCallerResponse struct {
}

func (m *MsgRemoveCallerResponse) Reset()         { *m = MsgRemoveCallerResponse{} }
func (m *MsgRemoveCallerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveCallerResponse) ProtoMessage()    {}
func (*MsgRemoveCallerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f8a53908bdb279a, []int{12}
}
func (m *MsgRemoveCallerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveCallerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveCallerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveCallerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveCallerResponse.Merge(m, src)
}
func (m *MsgRemoveCallerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveCallerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveCallerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveCallerResponse proto.InternalMessageInfo

// MsgWithdrawComputingPower is the Msg/MsgWithdrawComputingPower request type.
type MsgWithdrawComputingPower struct {
	// user is the address that receives the experience.
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// computing_power_amount is the node to receive computing power amount.
	ComputingPowerAmount uint64 `protobuf:"varint,2,opt,name=computing_power_amount,json=computingPowerAmount,proto3" json:"computing_power_amount,omitempty"`
	// node_id is the id of the captain node to receive experience.
	NodeId string `protobuf:"bytes,3,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
}

func (m *MsgWithdrawComputingPower) Reset()         { *m = MsgWithdrawComputingPower{} }
func (m *MsgWithdrawComputingPower) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawComputingPower) ProtoMessage()    {}
func (*MsgWithdrawComputingPower) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f8a53908bdb279a, []int{13}
}
func (m *MsgWithdrawComputingPower) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawComputingPower) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawComputingPower.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawComputingPower) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawComputingPower.Merge(m, src)
}
func (m *MsgWithdrawComputingPower) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawComputingPower) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawComputingPower.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawComputingPower proto.InternalMessageInfo

// MsgWithdrawComputingPowerResponse defines the response structure for executing a
// MsgWithdrawComputingPower message.
type MsgWithdrawComputingPowerResponse struct {
}

func (m *MsgWithdrawComputingPowerResponse) Reset()         { *m = MsgWithdrawComputingPowerResponse{} }
func (m *MsgWithdrawComputingPowerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawComputingPowerResponse) ProtoMessage()    {}
func (*MsgWithdrawComputingPowerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f8a53908bdb279a, []int{14}
}
func (m *MsgWithdrawComputingPowerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawComputingPowerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawComputingPowerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawComputingPowerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawComputingPowerResponse.Merge(m, src)
}
func (m *MsgWithdrawComputingPowerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawComputingPowerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawComputingPowerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawComputingPowerResponse proto.InternalMessageInfo

// MsgCreateCaptainNode is the Msg/CreateCaptainNode request type.
type MsgCreateCaptainNode struct {
	// sender is the address of the owner of nft
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// receiver is the receiver address of nft
	Receiver   string `protobuf:"bytes,2,opt,name=receiver,proto3" json:"receiver,omitempty"`
	DivisionId string `protobuf:"bytes,3,opt,name=division_id,json=divisionId,proto3" json:"division_id,omitempty"`
}

func (m *MsgCreateCaptainNode) Reset()         { *m = MsgCreateCaptainNode{} }
func (m *MsgCreateCaptainNode) String() string { return proto.CompactTextString(m) }
func (*MsgCreateCaptainNode) ProtoMessage()    {}
func (*MsgCreateCaptainNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f8a53908bdb279a, []int{15}
}
func (m *MsgCreateCaptainNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateCaptainNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateCaptainNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateCaptainNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateCaptainNode.Merge(m, src)
}
func (m *MsgCreateCaptainNode) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateCaptainNode) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateCaptainNode.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateCaptainNode proto.InternalMessageInfo

// MsgMintResponse defines the response structure for executing a
// MsgMint message.
type MsgCreateCaptainNodeResponse struct {
}

func (m *MsgCreateCaptainNodeResponse) Reset()         { *m = MsgCreateCaptainNodeResponse{} }
func (m *MsgCreateCaptainNodeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateCaptainNodeResponse) ProtoMessage()    {}
func (*MsgCreateCaptainNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f8a53908bdb279a, []int{16}
}
func (m *MsgCreateCaptainNodeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateCaptainNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateCaptainNodeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateCaptainNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateCaptainNodeResponse.Merge(m, src)
}
func (m *MsgCreateCaptainNodeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateCaptainNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateCaptainNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateCaptainNodeResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgUpdateParams)(nil), "tabi.captain_node.v1.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "tabi.captain_node.v1.MsgUpdateParamsResponse")
	proto.RegisterType((*MsgCommitReport)(nil), "tabi.captain_node.v1.MsgCommitReport")
	proto.RegisterType((*CaptainNodePowerOnPeriod)(nil), "tabi.captain_node.v1.CaptainNodePowerOnPeriod")
	proto.RegisterType((*MsgCommitReportResponse)(nil), "tabi.captain_node.v1.MsgCommitReportResponse")
	proto.RegisterType((*MsgRewardComputingPower)(nil), "tabi.captain_node.v1.MsgRewardComputingPower")
	proto.RegisterType((*MsgRewardComputingPowerResponse)(nil), "tabi.captain_node.v1.MsgRewardComputingPowerResponse")
	proto.RegisterType((*MsgUpdateSaleLevel)(nil), "tabi.captain_node.v1.MsgUpdateSaleLevel")
	proto.RegisterType((*MsgUpdateSaleLevelResponse)(nil), "tabi.captain_node.v1.MsgUpdateSaleLevelResponse")
	proto.RegisterType((*MsgAddCaller)(nil), "tabi.captain_node.v1.MsgAddCaller")
	proto.RegisterType((*MsgAddCallerResponse)(nil), "tabi.captain_node.v1.MsgAddCallerResponse")
	proto.RegisterType((*MsgRemoveCaller)(nil), "tabi.captain_node.v1.MsgRemoveCaller")
	proto.RegisterType((*MsgRemoveCallerResponse)(nil), "tabi.captain_node.v1.MsgRemoveCallerResponse")
	proto.RegisterType((*MsgWithdrawComputingPower)(nil), "tabi.captain_node.v1.MsgWithdrawComputingPower")
	proto.RegisterType((*MsgWithdrawComputingPowerResponse)(nil), "tabi.captain_node.v1.MsgWithdrawComputingPowerResponse")
	proto.RegisterType((*MsgCreateCaptainNode)(nil), "tabi.captain_node.v1.MsgCreateCaptainNode")
	proto.RegisterType((*MsgCreateCaptainNodeResponse)(nil), "tabi.captain_node.v1.MsgCreateCaptainNodeResponse")
}

func init() { proto.RegisterFile("tabi/captain-node/v1/tx.proto", fileDescriptor_3f8a53908bdb279a) }

var fileDescriptor_3f8a53908bdb279a = []byte{
	// 864 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0x4f, 0x6f, 0xe3, 0x44,
	0x14, 0x8f, 0x37, 0xab, 0x2c, 0x79, 0x59, 0xb1, 0x5a, 0x2b, 0x6a, 0x13, 0x2b, 0x75, 0xba, 0x41,
	0x0b, 0xd1, 0x4a, 0xb1, 0x77, 0xc3, 0x3f, 0xa9, 0xb7, 0x36, 0x70, 0x40, 0x10, 0xa8, 0xbc, 0x42,
	0x48, 0x70, 0xb0, 0x26, 0x9e, 0x91, 0x6b, 0xb0, 0x3d, 0x66, 0x66, 0x92, 0xb6, 0x12, 0xa7, 0x7e,
	0x02, 0x0e, 0xf0, 0x21, 0x90, 0x38, 0x70, 0xe0, 0x13, 0x70, 0xaa, 0xc4, 0xa5, 0xe2, 0x84, 0x38,
	0x54, 0xd0, 0x1e, 0xf8, 0x10, 0x5c, 0x90, 0xff, 0xc6, 0x4e, 0xed, 0x36, 0x2d, 0xe2, 0x14, 0x8f,
	0xdf, 0xef, 0xbd, 0xf7, 0xfb, 0xfd, 0xc6, 0xf3, 0x32, 0xb0, 0x25, 0xd0, 0xcc, 0xd1, 0x2d, 0x14,
	0x08, 0xe4, 0xf8, 0x23, 0x9f, 0x62, 0xa2, 0x2f, 0x5e, 0xe8, 0xe2, 0x48, 0x0b, 0x18, 0x15, 0x54,
	0x6e, 0x87, 0x61, 0x2d, 0x09, 0x9b, 0x61, 0x58, 0x5b, 0xbc, 0x50, 0xde, 0x28, 0x4d, 0xca, 0xaf,
	0xe3, 0x74, 0x65, 0xd3, 0xa2, 0xdc, 0xa3, 0x5c, 0xf7, 0xb8, 0x1d, 0x22, 0x3c, 0x6e, 0x27, 0x81,
	0x6e, 0x1c, 0x30, 0xa3, 0x95, 0x1e, 0x2f, 0x92, 0x50, 0xdb, 0xa6, 0x36, 0x8d, 0xdf, 0x87, 0x4f,
	0xf1, 0xdb, 0xc1, 0xf7, 0x12, 0x3c, 0x9a, 0x72, 0xfb, 0xd3, 0x00, 0x23, 0x41, 0xf6, 0x11, 0x43,
	0x1e, 0x97, 0xdf, 0x81, 0x26, 0x9a, 0x8b, 0x03, 0xca, 0x1c, 0x71, 0xdc, 0x91, 0xb6, 0xa5, 0x61,
	0x73, 0xaf, 0xf3, 0xdb, 0xcf, 0xa3, 0x76, 0x52, 0x6e, 0x17, 0x63, 0x46, 0x38, 0x7f, 0x29, 0x98,
	0xe3, 0xdb, 0xc6, 0x12, 0x2a, 0xef, 0x40, 0x23, 0x88, 0x2a, 0x74, 0xee, 0x6d, 0x4b, 0xc3, 0xd6,
	0xb8, 0xa7, 0x95, 0xa9, 0xd4, 0xe2, 0x2e, 0x7b, 0xf7, 0x4f, 0xcf, 0xfb, 0x35, 0x23, 0xc9, 0xd8,
	0x79, 0xf5, 0xe4, 0xef, 0x9f, 0x9e, 0x2d, 0x6b, 0x0d, 0xba, 0xb0, 0xb9, 0x42, 0xcb, 0x20, 0x3c,
	0xa0, 0x3e, 0x27, 0x83, 0x5f, 0x62, 0xca, 0x13, 0xea, 0x79, 0x8e, 0x30, 0x48, 0x40, 0x99, 0x90,
	0x9f, 0x43, 0x83, 0x13, 0x1f, 0x13, 0x76, 0x23, 0xdf, 0x04, 0x27, 0x07, 0xb0, 0x95, 0x27, 0x66,
	0x06, 0xf4, 0x90, 0x30, 0x93, 0xfa, 0x66, 0x40, 0x98, 0x43, 0x71, 0xa8, 0xa1, 0x3e, 0x6c, 0x8d,
	0xb5, 0x72, 0x0d, 0x93, 0x78, 0xfd, 0x31, 0xc5, 0x64, 0x3f, 0x4c, 0xfc, 0xc4, 0xdf, 0x8f, 0xd2,
	0x8c, 0xae, 0x55, 0x11, 0xe1, 0x3b, 0xad, 0x50, 0x62, 0xd2, 0x7e, 0xf0, 0x9d, 0x04, 0x9d, 0xaa,
	0x22, 0xb2, 0x09, 0xed, 0x15, 0x3a, 0x26, 0x43, 0x82, 0x24, 0xda, 0xb4, 0xd0, 0xb8, 0x3f, 0xce,
	0xfb, 0xaf, 0xdb, 0x8e, 0x38, 0x98, 0xcf, 0x34, 0x8b, 0x7a, 0xc9, 0x4e, 0x27, 0x3f, 0x23, 0x8e,
	0xbf, 0xd2, 0xc5, 0x71, 0x40, 0xb8, 0xf6, 0x1e, 0xb1, 0x8c, 0xc7, 0x41, 0x81, 0x21, 0x12, 0x44,
	0xde, 0x84, 0x07, 0x91, 0x68, 0x07, 0x47, 0x5b, 0xd5, 0x34, 0x1a, 0xe1, 0xf2, 0x03, 0x9c, 0xd8,
	0x9e, 0xb7, 0x36, 0xb3, 0xfd, 0x57, 0x29, 0x8a, 0x19, 0xe4, 0x10, 0x31, 0x3c, 0xa1, 0x5e, 0x30,
	0x17, 0x8e, 0x6f, 0x47, 0xc4, 0xef, 0x60, 0xff, 0xd7, 0xd0, 0x23, 0x47, 0x82, 0x21, 0x4b, 0xa0,
	0x99, 0x4b, 0x4c, 0x2b, 0xad, 0x17, 0xef, 0x43, 0xea, 0xbe, 0x5e, 0xee, 0xfe, 0xfb, 0xcb, 0xcc,
	0x22, 0x11, 0x43, 0x21, 0x55, 0xa1, 0x15, 0xff, 0x9f, 0x40, 0xbf, 0x42, 0x4c, 0x26, 0x98, 0x81,
	0x9c, 0x7d, 0x82, 0x2f, 0x91, 0x4b, 0x3e, 0x22, 0x0b, 0xe2, 0xde, 0x41, 0xea, 0x16, 0x00, 0x47,
	0x2e, 0x31, 0xdd, 0x30, 0x3f, 0xf2, 0xfb, 0xbe, 0xd1, 0xe4, 0x69, 0xc1, 0x22, 0xad, 0x1e, 0x28,
	0x57, 0x7b, 0x66, 0x8c, 0x6c, 0x78, 0x38, 0xe5, 0xf6, 0x2e, 0xc6, 0x13, 0xe4, 0xba, 0x84, 0xc9,
	0x1d, 0x78, 0x60, 0x45, 0x4f, 0xbc, 0x23, 0x6d, 0xd7, 0x87, 0x4d, 0x23, 0x5d, 0xe6, 0x58, 0xde,
	0x5b, 0x8f, 0x65, 0x91, 0xc6, 0x06, 0xb4, 0xf3, 0x8d, 0x32, 0x02, 0x5f, 0x46, 0x27, 0xcf, 0x20,
	0x1e, 0x5d, 0x90, 0xff, 0x9b, 0x43, 0x37, 0xf9, 0xdc, 0x96, 0xbd, 0x32, 0x1a, 0x3f, 0x48, 0xd0,
	0x9d, 0x72, 0xfb, 0x33, 0x47, 0x1c, 0x60, 0x86, 0x0e, 0xff, 0xf3, 0xc7, 0xf8, 0x16, 0x6c, 0xac,
	0x7c, 0x80, 0x26, 0xf2, 0xe8, 0xdc, 0x17, 0xc9, 0x6e, 0xb5, 0xad, 0x42, 0x87, 0xdd, 0x28, 0x96,
	0x3f, 0x44, 0xf5, 0xfc, 0x21, 0x2a, 0xca, 0x78, 0x0d, 0x9e, 0x54, 0x52, 0xcd, 0x04, 0xfd, 0x28,
	0x45, 0x86, 0x4f, 0x18, 0x41, 0x82, 0xe4, 0xc6, 0xc2, 0x9d, 0xb4, 0xbc, 0xc2, 0x88, 0x45, 0x9c,
	0xc5, 0x1a, 0xbe, 0x67, 0x48, 0xb9, 0x0f, 0x2d, 0xec, 0x2c, 0x1c, 0xee, 0x50, 0x7f, 0xa9, 0x07,
	0xd2, 0x57, 0xab, 0x9a, 0x54, 0xe8, 0x95, 0xb1, 0x4d, 0xe5, 0x8c, 0xff, 0x69, 0x40, 0x7d, 0xca,
	0x6d, 0x19, 0xc3, 0xc3, 0xc2, 0x1f, 0xcb, 0xd3, 0xf2, 0xe3, 0xbc, 0x32, 0xe8, 0x95, 0xd1, 0x5a,
	0xb0, 0xb4, 0x5b, 0xd8, 0xa5, 0xf0, 0x5f, 0x50, 0xdd, 0x25, 0x0f, 0xbb, 0xa6, 0x4b, 0xd9, 0xf8,
	0x93, 0xbf, 0x81, 0x76, 0xe9, 0xe8, 0xab, 0x2e, 0x53, 0x06, 0x57, 0xde, 0xbe, 0x15, 0x3c, 0xeb,
	0xee, 0xc1, 0xa3, 0xd5, 0x41, 0x34, 0xbc, 0xc1, 0xa5, 0x0c, 0xa9, 0x3c, 0x5f, 0x17, 0x99, 0xb5,
	0xfb, 0x02, 0x9a, 0xcb, 0x29, 0x33, 0xa8, 0x4c, 0xcf, 0x30, 0xca, 0xb3, 0x9b, 0x31, 0xf9, 0xfd,
	0x2a, 0x4c, 0x90, 0xa7, 0xd7, 0x58, 0xb2, 0x84, 0x29, 0xa3, 0xb5, 0x60, 0x59, 0x97, 0x13, 0x09,
	0x36, 0x2a, 0x06, 0x84, 0x5e, 0x59, 0xa9, 0x3c, 0x41, 0x79, 0xf7, 0x96, 0x09, 0x19, 0x09, 0x0e,
	0x8f, 0xaf, 0x9e, 0xe9, 0x6a, 0xaf, 0xae, 0x60, 0x95, 0xf1, 0xfa, 0xd8, 0xb4, 0xe9, 0xde, 0x87,
	0xa7, 0x7f, 0xa9, 0xb5, 0xd3, 0x0b, 0x55, 0x3a, 0xbb, 0x50, 0xa5, 0x3f, 0x2f, 0x54, 0xe9, 0xdb,
	0x4b, 0xb5, 0x76, 0x76, 0xa9, 0xd6, 0x7e, 0xbf, 0x54, 0x6b, 0x9f, 0x8f, 0x72, 0xb7, 0x86, 0xb0,
	0xb6, 0x8b, 0x66, 0x3c, 0x7a, 0xd0, 0x8f, 0x8a, 0x37, 0xcf, 0xe8, 0x02, 0x31, 0x6b, 0x44, 0xd7,
	0xc4, 0x37, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x88, 0x26, 0x36, 0x9d, 0xd0, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a governance operation for updating the x/coinswap
	// module parameters. The authority is defined in the keeper.
	//
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	// CommitReport defines a allow list operation for committing a report.
	CommitReport(ctx context.Context, in *MsgCommitReport, opts ...grpc.CallOption) (*MsgCommitReportResponse, error)
	// RewardComputingPower defines a allow list operation for rewarding computing power to a captain node's owner.
	RewardComputingPower(ctx context.Context, in *MsgRewardComputingPower, opts ...grpc.CallOption) (*MsgRewardComputingPowerResponse, error)
	// UpdateSaleLevel defines a allow list operation for updating the sale level.
	UpdateSaleLevel(ctx context.Context, in *MsgUpdateSaleLevel, opts ...grpc.CallOption) (*MsgUpdateSaleLevelResponse, error)
	// AddCaller defines a allow list  operation for registering some callers for mint node.
	AddCaller(ctx context.Context, in *MsgAddCaller, opts ...grpc.CallOption) (*MsgAddCallerResponse, error)
	// RemoveCaller defines a allow list  operation for removing some
	// callers for mint node.
	RemoveCaller(ctx context.Context, in *MsgRemoveCaller, opts ...grpc.CallOption) (*MsgRemoveCallerResponse, error)
	// WithdrawComputingPower defines a user operation for receiving computing power to a captain node.
	WithdrawComputingPower(ctx context.Context, in *MsgWithdrawComputingPower, opts ...grpc.CallOption) (*MsgWithdrawComputingPowerResponse, error)
	// CreateCaptainNode defines a user operation for creating a captain node.
	CreateCaptainNode(ctx context.Context, in *MsgCreateCaptainNode, opts ...grpc.CallOption) (*MsgCreateCaptainNodeResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/tabi.captain_node.v1.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CommitReport(ctx context.Context, in *MsgCommitReport, opts ...grpc.CallOption) (*MsgCommitReportResponse, error) {
	out := new(MsgCommitReportResponse)
	err := c.cc.Invoke(ctx, "/tabi.captain_node.v1.Msg/CommitReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RewardComputingPower(ctx context.Context, in *MsgRewardComputingPower, opts ...grpc.CallOption) (*MsgRewardComputingPowerResponse, error) {
	out := new(MsgRewardComputingPowerResponse)
	err := c.cc.Invoke(ctx, "/tabi.captain_node.v1.Msg/RewardComputingPower", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateSaleLevel(ctx context.Context, in *MsgUpdateSaleLevel, opts ...grpc.CallOption) (*MsgUpdateSaleLevelResponse, error) {
	out := new(MsgUpdateSaleLevelResponse)
	err := c.cc.Invoke(ctx, "/tabi.captain_node.v1.Msg/UpdateSaleLevel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddCaller(ctx context.Context, in *MsgAddCaller, opts ...grpc.CallOption) (*MsgAddCallerResponse, error) {
	out := new(MsgAddCallerResponse)
	err := c.cc.Invoke(ctx, "/tabi.captain_node.v1.Msg/AddCaller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveCaller(ctx context.Context, in *MsgRemoveCaller, opts ...grpc.CallOption) (*MsgRemoveCallerResponse, error) {
	out := new(MsgRemoveCallerResponse)
	err := c.cc.Invoke(ctx, "/tabi.captain_node.v1.Msg/RemoveCaller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) WithdrawComputingPower(ctx context.Context, in *MsgWithdrawComputingPower, opts ...grpc.CallOption) (*MsgWithdrawComputingPowerResponse, error) {
	out := new(MsgWithdrawComputingPowerResponse)
	err := c.cc.Invoke(ctx, "/tabi.captain_node.v1.Msg/WithdrawComputingPower", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateCaptainNode(ctx context.Context, in *MsgCreateCaptainNode, opts ...grpc.CallOption) (*MsgCreateCaptainNodeResponse, error) {
	out := new(MsgCreateCaptainNodeResponse)
	err := c.cc.Invoke(ctx, "/tabi.captain_node.v1.Msg/CreateCaptainNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// UpdateParams defines a governance operation for updating the x/coinswap
	// module parameters. The authority is defined in the keeper.
	//
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	// CommitReport defines a allow list operation for committing a report.
	CommitReport(context.Context, *MsgCommitReport) (*MsgCommitReportResponse, error)
	// RewardComputingPower defines a allow list operation for rewarding computing power to a captain node's owner.
	RewardComputingPower(context.Context, *MsgRewardComputingPower) (*MsgRewardComputingPowerResponse, error)
	// UpdateSaleLevel defines a allow list operation for updating the sale level.
	UpdateSaleLevel(context.Context, *MsgUpdateSaleLevel) (*MsgUpdateSaleLevelResponse, error)
	// AddCaller defines a allow list  operation for registering some callers for mint node.
	AddCaller(context.Context, *MsgAddCaller) (*MsgAddCallerResponse, error)
	// RemoveCaller defines a allow list  operation for removing some
	// callers for mint node.
	RemoveCaller(context.Context, *MsgRemoveCaller) (*MsgRemoveCallerResponse, error)
	// WithdrawComputingPower defines a user operation for receiving computing power to a captain node.
	WithdrawComputingPower(context.Context, *MsgWithdrawComputingPower) (*MsgWithdrawComputingPowerResponse, error)
	// CreateCaptainNode defines a user operation for creating a captain node.
	CreateCaptainNode(context.Context, *MsgCreateCaptainNode) (*MsgCreateCaptainNodeResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (*UnimplementedMsgServer) CommitReport(ctx context.Context, req *MsgCommitReport) (*MsgCommitReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitReport not implemented")
}
func (*UnimplementedMsgServer) RewardComputingPower(ctx context.Context, req *MsgRewardComputingPower) (*MsgRewardComputingPowerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RewardComputingPower not implemented")
}
func (*UnimplementedMsgServer) UpdateSaleLevel(ctx context.Context, req *MsgUpdateSaleLevel) (*MsgUpdateSaleLevelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSaleLevel not implemented")
}
func (*UnimplementedMsgServer) AddCaller(ctx context.Context, req *MsgAddCaller) (*MsgAddCallerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCaller not implemented")
}
func (*UnimplementedMsgServer) RemoveCaller(ctx context.Context, req *MsgRemoveCaller) (*MsgRemoveCallerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCaller not implemented")
}
func (*UnimplementedMsgServer) WithdrawComputingPower(ctx context.Context, req *MsgWithdrawComputingPower) (*MsgWithdrawComputingPowerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawComputingPower not implemented")
}
func (*UnimplementedMsgServer) CreateCaptainNode(ctx context.Context, req *MsgCreateCaptainNode) (*MsgCreateCaptainNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCaptainNode not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabi.captain_node.v1.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CommitReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCommitReport)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CommitReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabi.captain_node.v1.Msg/CommitReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CommitReport(ctx, req.(*MsgCommitReport))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RewardComputingPower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRewardComputingPower)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RewardComputingPower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabi.captain_node.v1.Msg/RewardComputingPower",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RewardComputingPower(ctx, req.(*MsgRewardComputingPower))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateSaleLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateSaleLevel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateSaleLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabi.captain_node.v1.Msg/UpdateSaleLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateSaleLevel(ctx, req.(*MsgUpdateSaleLevel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddCaller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddCaller)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddCaller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabi.captain_node.v1.Msg/AddCaller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddCaller(ctx, req.(*MsgAddCaller))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveCaller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveCaller)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveCaller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabi.captain_node.v1.Msg/RemoveCaller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveCaller(ctx, req.(*MsgRemoveCaller))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_WithdrawComputingPower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWithdrawComputingPower)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).WithdrawComputingPower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabi.captain_node.v1.Msg/WithdrawComputingPower",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).WithdrawComputingPower(ctx, req.(*MsgWithdrawComputingPower))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateCaptainNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateCaptainNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateCaptainNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabi.captain_node.v1.Msg/CreateCaptainNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateCaptainNode(ctx, req.(*MsgCreateCaptainNode))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tabi.captain_node.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "CommitReport",
			Handler:    _Msg_CommitReport_Handler,
		},
		{
			MethodName: "RewardComputingPower",
			Handler:    _Msg_RewardComputingPower_Handler,
		},
		{
			MethodName: "UpdateSaleLevel",
			Handler:    _Msg_UpdateSaleLevel_Handler,
		},
		{
			MethodName: "AddCaller",
			Handler:    _Msg_AddCaller_Handler,
		},
		{
			MethodName: "RemoveCaller",
			Handler:    _Msg_RemoveCaller_Handler,
		},
		{
			MethodName: "WithdrawComputingPower",
			Handler:    _Msg_WithdrawComputingPower_Handler,
		},
		{
			MethodName: "CreateCaptainNode",
			Handler:    _Msg_CreateCaptainNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tabi/captain-node/v1/tx.proto",
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCommitReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCommitReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCommitReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CaptainNodePowerOnPeriods) > 0 {
		for iNdEx := len(m.CaptainNodePowerOnPeriods) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CaptainNodePowerOnPeriods[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CaptainNodePowerOnPeriod) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CaptainNodePowerOnPeriod) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CaptainNodePowerOnPeriod) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NodeId) > 0 {
		i -= len(m.NodeId)
		copy(dAtA[i:], m.NodeId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NodeId)))
		i--
		dAtA[i] = 0x12
	}
	{
		size := m.PowerOnPeriodRate.Size()
		i -= size
		if _, err := m.PowerOnPeriodRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgCommitReportResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCommitReportResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCommitReportResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRewardComputingPower) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRewardComputingPower) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRewardComputingPower) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExtractableComputingPowers) > 0 {
		for iNdEx := len(m.ExtractableComputingPowers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExtractableComputingPowers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRewardComputingPowerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRewardComputingPowerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRewardComputingPowerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateSaleLevel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateSaleLevel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateSaleLevel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SaleLevel != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SaleLevel))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateSaleLevelResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateSaleLevelResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateSaleLevelResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddCaller) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddCaller) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddCaller) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Callers) > 0 {
		for iNdEx := len(m.Callers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Callers[iNdEx])
			copy(dAtA[i:], m.Callers[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Callers[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddCallerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddCallerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddCallerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRemoveCaller) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveCaller) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveCaller) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Callers) > 0 {
		for iNdEx := len(m.Callers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Callers[iNdEx])
			copy(dAtA[i:], m.Callers[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Callers[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveCallerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveCallerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveCallerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawComputingPower) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawComputingPower) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawComputingPower) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NodeId) > 0 {
		i -= len(m.NodeId)
		copy(dAtA[i:], m.NodeId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NodeId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ComputingPowerAmount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ComputingPowerAmount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawComputingPowerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawComputingPowerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawComputingPowerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateCaptainNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateCaptainNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateCaptainNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DivisionId) > 0 {
		i -= len(m.DivisionId)
		copy(dAtA[i:], m.DivisionId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DivisionId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateCaptainNodeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateCaptainNodeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateCaptainNodeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCommitReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.CaptainNodePowerOnPeriods) > 0 {
		for _, e := range m.CaptainNodePowerOnPeriods {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *CaptainNodePowerOnPeriod) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PowerOnPeriodRate.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.NodeId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCommitReportResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRewardComputingPower) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.ExtractableComputingPowers) > 0 {
		for _, e := range m.ExtractableComputingPowers {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgRewardComputingPowerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateSaleLevel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.SaleLevel != 0 {
		n += 1 + sovTx(uint64(m.SaleLevel))
	}
	return n
}

func (m *MsgUpdateSaleLevelResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddCaller) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Callers) > 0 {
		for _, s := range m.Callers {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAddCallerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRemoveCaller) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Callers) > 0 {
		for _, s := range m.Callers {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRemoveCallerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgWithdrawComputingPower) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ComputingPowerAmount != 0 {
		n += 1 + sovTx(uint64(m.ComputingPowerAmount))
	}
	l = len(m.NodeId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgWithdrawComputingPowerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateCaptainNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DivisionId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateCaptainNodeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCommitReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCommitReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCommitReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptainNodePowerOnPeriods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CaptainNodePowerOnPeriods = append(m.CaptainNodePowerOnPeriods, &CaptainNodePowerOnPeriod{})
			if err := m.CaptainNodePowerOnPeriods[len(m.CaptainNodePowerOnPeriods)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CaptainNodePowerOnPeriod) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CaptainNodePowerOnPeriod: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CaptainNodePowerOnPeriod: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PowerOnPeriodRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PowerOnPeriodRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCommitReportResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCommitReportResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCommitReportResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRewardComputingPower) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRewardComputingPower: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRewardComputingPower: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtractableComputingPowers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtractableComputingPowers = append(m.ExtractableComputingPowers, &ExtractableComputingPower{})
			if err := m.ExtractableComputingPowers[len(m.ExtractableComputingPowers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRewardComputingPowerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRewardComputingPowerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRewardComputingPowerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateSaleLevel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateSaleLevel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateSaleLevel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SaleLevel", wireType)
			}
			m.SaleLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SaleLevel |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateSaleLevelResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateSaleLevelResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateSaleLevelResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddCaller) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddCaller: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddCaller: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Callers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Callers = append(m.Callers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddCallerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddCallerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddCallerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveCaller) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveCaller: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveCaller: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Callers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Callers = append(m.Callers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveCallerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveCallerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveCallerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawComputingPower) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawComputingPower: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawComputingPower: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComputingPowerAmount", wireType)
			}
			m.ComputingPowerAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ComputingPowerAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawComputingPowerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawComputingPowerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawComputingPowerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateCaptainNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateCaptainNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateCaptainNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DivisionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DivisionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateCaptainNodeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateCaptainNodeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateCaptainNodeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
