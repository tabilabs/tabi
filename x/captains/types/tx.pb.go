// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tabi/captains/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgUpdateParams defines the Msg/UpdateParams request type.
type MsgUpdateParams struct {
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	Params    Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_37c8063cf8a41f43, []int{0}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

// MsgUpdateParamsResponse defines the Msg/UpdateParamsResponse response type.
type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_37c8063cf8a41f43, []int{1}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

// MsgCreateCaptainNode defines the Msg/CreateCaptainNode request type.
type MsgCreateCaptainNode struct {
	Authority  string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	Owner      string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	DivisionId string `protobuf:"bytes,3,opt,name=division_id,json=divisionId,proto3" json:"division_id,omitempty"`
}

func (m *MsgCreateCaptainNode) Reset()         { *m = MsgCreateCaptainNode{} }
func (m *MsgCreateCaptainNode) String() string { return proto.CompactTextString(m) }
func (*MsgCreateCaptainNode) ProtoMessage()    {}
func (*MsgCreateCaptainNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_37c8063cf8a41f43, []int{2}
}
func (m *MsgCreateCaptainNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateCaptainNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateCaptainNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateCaptainNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateCaptainNode.Merge(m, src)
}
func (m *MsgCreateCaptainNode) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateCaptainNode) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateCaptainNode.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateCaptainNode proto.InternalMessageInfo

// MsgCreateCaptainNodeResponse defines the Msg/CreateCaptainNode response type.
type MsgCreateCaptainNodeResponse struct {
}

func (m *MsgCreateCaptainNodeResponse) Reset()         { *m = MsgCreateCaptainNodeResponse{} }
func (m *MsgCreateCaptainNodeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateCaptainNodeResponse) ProtoMessage()    {}
func (*MsgCreateCaptainNodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_37c8063cf8a41f43, []int{3}
}
func (m *MsgCreateCaptainNodeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateCaptainNodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateCaptainNodeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateCaptainNodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateCaptainNodeResponse.Merge(m, src)
}
func (m *MsgCreateCaptainNodeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateCaptainNodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateCaptainNodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateCaptainNodeResponse proto.InternalMessageInfo

// MsgCommitReport is the Msg/CommitReport request type.
type MsgCommitReport struct {
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// TODO: report to be redesigned.
	Report string `protobuf:"bytes,2,opt,name=report,proto3" json:"report,omitempty"`
}

func (m *MsgCommitReport) Reset()         { *m = MsgCommitReport{} }
func (m *MsgCommitReport) String() string { return proto.CompactTextString(m) }
func (*MsgCommitReport) ProtoMessage()    {}
func (*MsgCommitReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_37c8063cf8a41f43, []int{4}
}
func (m *MsgCommitReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCommitReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCommitReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCommitReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCommitReport.Merge(m, src)
}
func (m *MsgCommitReport) XXX_Size() int {
	return m.Size()
}
func (m *MsgCommitReport) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCommitReport.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCommitReport proto.InternalMessageInfo

// MsgCommitReportResponse defines the Msg/CommitReportResponse response type.
type MsgCommitReportResponse struct {
}

func (m *MsgCommitReportResponse) Reset()         { *m = MsgCommitReportResponse{} }
func (m *MsgCommitReportResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCommitReportResponse) ProtoMessage()    {}
func (*MsgCommitReportResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_37c8063cf8a41f43, []int{5}
}
func (m *MsgCommitReportResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCommitReportResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCommitReportResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCommitReportResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCommitReportResponse.Merge(m, src)
}
func (m *MsgCommitReportResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCommitReportResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCommitReportResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCommitReportResponse proto.InternalMessageInfo

// MsgAddAuthorizedMember defines the Msg/AddAuthorizedMember request type.
type MsgAddAuthorizedMember struct {
	Authority string   `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	Members   []string `protobuf:"bytes,2,rep,name=members,proto3" json:"members,omitempty"`
}

func (m *MsgAddAuthorizedMember) Reset()         { *m = MsgAddAuthorizedMember{} }
func (m *MsgAddAuthorizedMember) String() string { return proto.CompactTextString(m) }
func (*MsgAddAuthorizedMember) ProtoMessage()    {}
func (*MsgAddAuthorizedMember) Descriptor() ([]byte, []int) {
	return fileDescriptor_37c8063cf8a41f43, []int{6}
}
func (m *MsgAddAuthorizedMember) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddAuthorizedMember) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddAuthorizedMember.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddAuthorizedMember) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddAuthorizedMember.Merge(m, src)
}
func (m *MsgAddAuthorizedMember) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddAuthorizedMember) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddAuthorizedMember.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddAuthorizedMember proto.InternalMessageInfo

// MsgAddAuthorizedMemberResponse defines the Msg/AddAuthorizedMemberResponse response type.
type MsgAddAuthorizedMemberResponse struct {
}

func (m *MsgAddAuthorizedMemberResponse) Reset()         { *m = MsgAddAuthorizedMemberResponse{} }
func (m *MsgAddAuthorizedMemberResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddAuthorizedMemberResponse) ProtoMessage()    {}
func (*MsgAddAuthorizedMemberResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_37c8063cf8a41f43, []int{7}
}
func (m *MsgAddAuthorizedMemberResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddAuthorizedMemberResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddAuthorizedMemberResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddAuthorizedMemberResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddAuthorizedMemberResponse.Merge(m, src)
}
func (m *MsgAddAuthorizedMemberResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddAuthorizedMemberResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddAuthorizedMemberResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddAuthorizedMemberResponse proto.InternalMessageInfo

// MsgRemoveAuthorizedMember defines the Msg/RemoveAuthorizedMember request type.
type MsgRemoveAuthorizedMember struct {
	Authority string   `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	Members   []string `protobuf:"bytes,2,rep,name=members,proto3" json:"members,omitempty"`
}

func (m *MsgRemoveAuthorizedMember) Reset()         { *m = MsgRemoveAuthorizedMember{} }
func (m *MsgRemoveAuthorizedMember) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveAuthorizedMember) ProtoMessage()    {}
func (*MsgRemoveAuthorizedMember) Descriptor() ([]byte, []int) {
	return fileDescriptor_37c8063cf8a41f43, []int{8}
}
func (m *MsgRemoveAuthorizedMember) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveAuthorizedMember) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveAuthorizedMember.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveAuthorizedMember) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveAuthorizedMember.Merge(m, src)
}
func (m *MsgRemoveAuthorizedMember) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveAuthorizedMember) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveAuthorizedMember.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveAuthorizedMember proto.InternalMessageInfo

// MsgRemoveAuthorizedMemberResponse defines the Msg/RemoveAuthorizedMemberResponse response type.
type MsgRemoveAuthorizedMemberResponse struct {
}

func (m *MsgRemoveAuthorizedMemberResponse) Reset()         { *m = MsgRemoveAuthorizedMemberResponse{} }
func (m *MsgRemoveAuthorizedMemberResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveAuthorizedMemberResponse) ProtoMessage()    {}
func (*MsgRemoveAuthorizedMemberResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_37c8063cf8a41f43, []int{9}
}
func (m *MsgRemoveAuthorizedMemberResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveAuthorizedMemberResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveAuthorizedMemberResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveAuthorizedMemberResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveAuthorizedMemberResponse.Merge(m, src)
}
func (m *MsgRemoveAuthorizedMemberResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveAuthorizedMemberResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveAuthorizedMemberResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveAuthorizedMemberResponse proto.InternalMessageInfo

// MsgUpdateSaleLevel defines the Msg/UpdateSaleLevel request type.
type MsgUpdateSaleLevel struct {
	// sender is the address of the owner of nft
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// sale_level is the sale levels to update.
	SaleLevel uint64 `protobuf:"varint,2,opt,name=sale_level,json=saleLevel,proto3" json:"sale_level,omitempty"`
}

func (m *MsgUpdateSaleLevel) Reset()         { *m = MsgUpdateSaleLevel{} }
func (m *MsgUpdateSaleLevel) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateSaleLevel) ProtoMessage()    {}
func (*MsgUpdateSaleLevel) Descriptor() ([]byte, []int) {
	return fileDescriptor_37c8063cf8a41f43, []int{10}
}
func (m *MsgUpdateSaleLevel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateSaleLevel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateSaleLevel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateSaleLevel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateSaleLevel.Merge(m, src)
}
func (m *MsgUpdateSaleLevel) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateSaleLevel) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateSaleLevel.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateSaleLevel proto.InternalMessageInfo

// MsgUpdateSaleLevelResponse defines the Msg/UpdateSaleLevelResponse response type.
type MsgUpdateSaleLevelResponse struct {
}

func (m *MsgUpdateSaleLevelResponse) Reset()         { *m = MsgUpdateSaleLevelResponse{} }
func (m *MsgUpdateSaleLevelResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateSaleLevelResponse) ProtoMessage()    {}
func (*MsgUpdateSaleLevelResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_37c8063cf8a41f43, []int{11}
}
func (m *MsgUpdateSaleLevelResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateSaleLevelResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateSaleLevelResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateSaleLevelResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateSaleLevelResponse.Merge(m, src)
}
func (m *MsgUpdateSaleLevelResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateSaleLevelResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateSaleLevelResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateSaleLevelResponse proto.InternalMessageInfo

// MsgCommitComputingPower defines the Msg/CommitComputingPowerResponse request type.
type MsgCommitComputingPower struct {
	// sender is the address of the owner of nft
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// computing_power_rewards is the extractable computing powers to reward.
	ComputingPowerRewards []*ClaimableComputingPower `protobuf:"bytes,2,rep,name=computing_power_rewards,json=computingPowerRewards,proto3" json:"computing_power_rewards,omitempty"`
}

func (m *MsgCommitComputingPower) Reset()         { *m = MsgCommitComputingPower{} }
func (m *MsgCommitComputingPower) String() string { return proto.CompactTextString(m) }
func (*MsgCommitComputingPower) ProtoMessage()    {}
func (*MsgCommitComputingPower) Descriptor() ([]byte, []int) {
	return fileDescriptor_37c8063cf8a41f43, []int{12}
}
func (m *MsgCommitComputingPower) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCommitComputingPower) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCommitComputingPower.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCommitComputingPower) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCommitComputingPower.Merge(m, src)
}
func (m *MsgCommitComputingPower) XXX_Size() int {
	return m.Size()
}
func (m *MsgCommitComputingPower) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCommitComputingPower.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCommitComputingPower proto.InternalMessageInfo

// MsgCommitComputingPowerResponse defines the Msg/CommitComputingPowerResponse response type.
type MsgCommitComputingPowerResponse struct {
}

func (m *MsgCommitComputingPowerResponse) Reset()         { *m = MsgCommitComputingPowerResponse{} }
func (m *MsgCommitComputingPowerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCommitComputingPowerResponse) ProtoMessage()    {}
func (*MsgCommitComputingPowerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_37c8063cf8a41f43, []int{13}
}
func (m *MsgCommitComputingPowerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCommitComputingPowerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCommitComputingPowerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCommitComputingPowerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCommitComputingPowerResponse.Merge(m, src)
}
func (m *MsgCommitComputingPowerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCommitComputingPowerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCommitComputingPowerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCommitComputingPowerResponse proto.InternalMessageInfo

// MsgClaimComputingPower defines the Msg/ClaimComputingPower request type.
type MsgClaimComputingPower struct {
	Sender               string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	ComputingPowerAmount uint64 `protobuf:"varint,2,opt,name=computing_power_amount,json=computingPowerAmount,proto3" json:"computing_power_amount,omitempty"`
	NodeId               string `protobuf:"bytes,3,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
}

func (m *MsgClaimComputingPower) Reset()         { *m = MsgClaimComputingPower{} }
func (m *MsgClaimComputingPower) String() string { return proto.CompactTextString(m) }
func (*MsgClaimComputingPower) ProtoMessage()    {}
func (*MsgClaimComputingPower) Descriptor() ([]byte, []int) {
	return fileDescriptor_37c8063cf8a41f43, []int{14}
}
func (m *MsgClaimComputingPower) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimComputingPower) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimComputingPower.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimComputingPower) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimComputingPower.Merge(m, src)
}
func (m *MsgClaimComputingPower) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimComputingPower) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimComputingPower.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimComputingPower proto.InternalMessageInfo

// MsgClaimComputingPowerResponse defines the Msg/ClaimComputingPowerResponse response type.
type MsgClaimComputingPowerResponse struct {
}

func (m *MsgClaimComputingPowerResponse) Reset()         { *m = MsgClaimComputingPowerResponse{} }
func (m *MsgClaimComputingPowerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgClaimComputingPowerResponse) ProtoMessage()    {}
func (*MsgClaimComputingPowerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_37c8063cf8a41f43, []int{15}
}
func (m *MsgClaimComputingPowerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimComputingPowerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimComputingPowerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimComputingPowerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimComputingPowerResponse.Merge(m, src)
}
func (m *MsgClaimComputingPowerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimComputingPowerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimComputingPowerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimComputingPowerResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgUpdateParams)(nil), "tabi.captains.v1.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "tabi.captains.v1.MsgUpdateParamsResponse")
	proto.RegisterType((*MsgCreateCaptainNode)(nil), "tabi.captains.v1.MsgCreateCaptainNode")
	proto.RegisterType((*MsgCreateCaptainNodeResponse)(nil), "tabi.captains.v1.MsgCreateCaptainNodeResponse")
	proto.RegisterType((*MsgCommitReport)(nil), "tabi.captains.v1.MsgCommitReport")
	proto.RegisterType((*MsgCommitReportResponse)(nil), "tabi.captains.v1.MsgCommitReportResponse")
	proto.RegisterType((*MsgAddAuthorizedMember)(nil), "tabi.captains.v1.MsgAddAuthorizedMember")
	proto.RegisterType((*MsgAddAuthorizedMemberResponse)(nil), "tabi.captains.v1.MsgAddAuthorizedMemberResponse")
	proto.RegisterType((*MsgRemoveAuthorizedMember)(nil), "tabi.captains.v1.MsgRemoveAuthorizedMember")
	proto.RegisterType((*MsgRemoveAuthorizedMemberResponse)(nil), "tabi.captains.v1.MsgRemoveAuthorizedMemberResponse")
	proto.RegisterType((*MsgUpdateSaleLevel)(nil), "tabi.captains.v1.MsgUpdateSaleLevel")
	proto.RegisterType((*MsgUpdateSaleLevelResponse)(nil), "tabi.captains.v1.MsgUpdateSaleLevelResponse")
	proto.RegisterType((*MsgCommitComputingPower)(nil), "tabi.captains.v1.MsgCommitComputingPower")
	proto.RegisterType((*MsgCommitComputingPowerResponse)(nil), "tabi.captains.v1.MsgCommitComputingPowerResponse")
	proto.RegisterType((*MsgClaimComputingPower)(nil), "tabi.captains.v1.MsgClaimComputingPower")
	proto.RegisterType((*MsgClaimComputingPowerResponse)(nil), "tabi.captains.v1.MsgClaimComputingPowerResponse")
}

func init() { proto.RegisterFile("tabi/captains/v1/tx.proto", fileDescriptor_37c8063cf8a41f43) }

var fileDescriptor_37c8063cf8a41f43 = []byte{
	// 771 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0xcb, 0x6e, 0xd3, 0x4a,
	0x18, 0x8e, 0x4f, 0x7b, 0x52, 0xe5, 0x4f, 0x75, 0x7a, 0x8e, 0x4f, 0xc8, 0xc5, 0x2a, 0x4e, 0x5b,
	0x10, 0x4a, 0xb9, 0x38, 0xbd, 0xa0, 0x2e, 0xba, 0x4b, 0xb3, 0x40, 0x95, 0x08, 0xaa, 0x5c, 0xb1,
	0x41, 0x95, 0xa2, 0x49, 0x66, 0xe4, 0x5a, 0xc4, 0x1e, 0xd7, 0x33, 0x49, 0x2f, 0x88, 0x0d, 0x4f,
	0x00, 0x2f, 0xc1, 0x16, 0x16, 0x3c, 0x02, 0x8b, 0x2e, 0x2b, 0x56, 0xac, 0x10, 0xb4, 0x0b, 0x56,
	0xbc, 0x03, 0xf2, 0x25, 0xce, 0xc5, 0x93, 0x34, 0x84, 0x05, 0x3b, 0x8f, 0xff, 0x6f, 0xbe, 0xcb,
	0xfc, 0xe3, 0x5f, 0x86, 0x02, 0x47, 0x0d, 0xb3, 0xdc, 0x44, 0x0e, 0x47, 0xa6, 0xcd, 0xca, 0x9d,
	0xf5, 0x32, 0x3f, 0xd1, 0x1c, 0x97, 0x72, 0x2a, 0xff, 0xeb, 0x95, 0xb4, 0x6e, 0x49, 0xeb, 0xac,
	0x2b, 0x19, 0x83, 0x1a, 0xd4, 0x2f, 0x96, 0xbd, 0xa7, 0x00, 0xa7, 0xe4, 0x9a, 0x94, 0x59, 0x94,
	0x95, 0x2d, 0x66, 0x78, 0xfb, 0x2d, 0x66, 0x84, 0x85, 0x42, 0x50, 0xa8, 0x07, 0x3b, 0x82, 0x45,
	0x58, 0x2a, 0xc6, 0x64, 0x23, 0x1d, 0x1f, 0xb0, 0xf2, 0x46, 0x82, 0x85, 0x1a, 0x33, 0x9e, 0x3a,
	0x18, 0x71, 0xb2, 0x87, 0x5c, 0x64, 0x31, 0x79, 0x0b, 0x52, 0xa8, 0xcd, 0x0f, 0xa9, 0x6b, 0xf2,
	0xd3, 0xbc, 0xb4, 0x24, 0x95, 0x52, 0x3b, 0xf9, 0x4f, 0x1f, 0x1e, 0x64, 0x42, 0xe6, 0x0a, 0xc6,
	0x2e, 0x61, 0x6c, 0x9f, 0xbb, 0xa6, 0x6d, 0xe8, 0x3d, 0xa8, 0xbc, 0x05, 0x49, 0xc7, 0x67, 0xc8,
	0xff, 0xb5, 0x24, 0x95, 0xd2, 0x1b, 0x79, 0x6d, 0x38, 0x99, 0x16, 0x28, 0xec, 0xcc, 0x9e, 0x7f,
	0x29, 0x26, 0xf4, 0x10, 0xbd, 0xfd, 0xcf, 0xab, 0xef, 0xef, 0xef, 0xf6, 0x78, 0x56, 0x0a, 0x90,
	0x1b, 0xb2, 0xa4, 0x13, 0xe6, 0x50, 0x9b, 0x91, 0x95, 0x77, 0x12, 0x64, 0x6a, 0xcc, 0xa8, 0xba,
	0x04, 0x71, 0x52, 0x0d, 0x88, 0x9f, 0x50, 0x4c, 0xa6, 0xf6, 0xac, 0xc1, 0xdf, 0xf4, 0xd8, 0x26,
	0xae, 0x6f, 0x79, 0xdc, 0x9e, 0x00, 0x26, 0x17, 0x21, 0x8d, 0xcd, 0x8e, 0xc9, 0x4c, 0x6a, 0xd7,
	0x4d, 0x9c, 0x9f, 0xf1, 0x76, 0xe9, 0xd0, 0x7d, 0xb5, 0x8b, 0x63, 0x61, 0x54, 0x58, 0x14, 0x19,
	0x8e, 0x12, 0x1d, 0xf9, 0xe7, 0x5f, 0xa5, 0x96, 0x65, 0x72, 0x9d, 0x38, 0xd4, 0xe5, 0x53, 0x67,
	0xc9, 0x42, 0xd2, 0xf5, 0x19, 0x82, 0x30, 0x7a, 0xb8, 0x1a, 0x71, 0xbe, 0xfd, 0x92, 0x91, 0x9b,
	0x33, 0xc8, 0xd6, 0x98, 0x51, 0xc1, 0xb8, 0x12, 0xa0, 0xcf, 0x08, 0xae, 0x11, 0xab, 0x41, 0xdc,
	0xa9, 0x4d, 0xe5, 0x61, 0xce, 0xf2, 0x19, 0xbc, 0x5b, 0x31, 0x53, 0x4a, 0xe9, 0xdd, 0x65, 0xcc,
	0xd6, 0x12, 0xa8, 0x62, 0xed, 0xc8, 0xdd, 0x4b, 0x28, 0xd4, 0x98, 0xa1, 0x13, 0x8b, 0x76, 0xc8,
	0x1f, 0x30, 0x78, 0x0b, 0x96, 0x47, 0xca, 0x47, 0x1e, 0x5f, 0x80, 0x1c, 0x5d, 0xde, 0x7d, 0xd4,
	0x22, 0x8f, 0x49, 0x87, 0xb4, 0xa6, 0x36, 0x77, 0x13, 0x80, 0xa1, 0x16, 0xa9, 0xb7, 0x3c, 0x16,
	0xbf, 0xad, 0xb3, 0x7a, 0x8a, 0x75, 0x69, 0x63, 0x0e, 0x17, 0x41, 0x89, 0x8b, 0x47, 0xd6, 0x3e,
	0x4a, 0x7d, 0x8d, 0xaf, 0x52, 0xcb, 0x69, 0x73, 0xd3, 0x36, 0xf6, 0xe8, 0xf1, 0x6f, 0x9c, 0x1e,
	0x82, 0x5c, 0xb3, 0xcb, 0x54, 0x77, 0x3c, 0xaa, 0xba, 0x4b, 0x8e, 0x91, 0x8b, 0x83, 0xd3, 0x4c,
	0x6f, 0xac, 0xc6, 0x87, 0x40, 0xb5, 0x85, 0x4c, 0x0b, 0x35, 0x5a, 0x64, 0xd0, 0x83, 0x7e, 0xa3,
	0x39, 0xb8, 0x0e, 0x78, 0x62, 0x21, 0x97, 0xa1, 0x38, 0x22, 0x45, 0x94, 0xf4, 0xad, 0xe4, 0xdf,
	0x63, 0x5f, 0x68, 0x28, 0xe8, 0x1a, 0x24, 0x19, 0xb1, 0x31, 0x71, 0xaf, 0x4d, 0x19, 0xe2, 0xe4,
	0x87, 0x90, 0x1d, 0x8e, 0x88, 0x2c, 0xda, 0xb6, 0x79, 0xd8, 0x8f, 0xcc, 0xa0, 0xed, 0x8a, 0x5f,
	0x93, 0x73, 0x30, 0x67, 0x53, 0x4c, 0x7a, 0x43, 0x22, 0xe9, 0x2d, 0x77, 0xf1, 0x76, 0xda, 0x8b,
	0x13, 0x72, 0x87, 0x77, 0x5e, 0xe0, 0xb3, 0x1b, 0x65, 0xe3, 0x47, 0x12, 0x66, 0x6a, 0xcc, 0x90,
	0x0f, 0x60, 0x7e, 0x60, 0x48, 0x2f, 0xc7, 0xcf, 0x75, 0x68, 0x68, 0x2a, 0xab, 0xd7, 0x42, 0xba,
	0x2a, 0xf2, 0x73, 0xf8, 0x2f, 0x3e, 0x53, 0xef, 0x08, 0xf7, 0xc7, 0x70, 0x8a, 0x36, 0x19, 0x2e,
	0x12, 0x3b, 0x80, 0xf9, 0x81, 0x79, 0x27, 0x8e, 0xd2, 0x0f, 0x19, 0x11, 0x45, 0x34, 0xc2, 0xe4,
	0x23, 0xf8, 0x5f, 0x34, 0xbf, 0x4a, 0x42, 0x06, 0x01, 0x52, 0x59, 0x9b, 0x14, 0x19, 0x49, 0x9e,
	0x41, 0x76, 0xc4, 0x50, 0xba, 0x27, 0xe4, 0x12, 0x83, 0x95, 0xcd, 0x5f, 0x00, 0x47, 0xda, 0x04,
	0x16, 0x86, 0x87, 0xcd, 0xed, 0x31, 0x7d, 0x8f, 0x50, 0xca, 0xfd, 0x49, 0x50, 0x91, 0x0c, 0x87,
	0x8c, 0x70, 0x6e, 0x8c, 0x6b, 0xcc, 0x20, 0x54, 0x59, 0x9f, 0x18, 0xda, 0xdf, 0x4b, 0xd1, 0x37,
	0x2c, 0xee, 0xa5, 0x00, 0x39, 0xa2, 0x97, 0x63, 0xbe, 0xb7, 0x9d, 0x47, 0xe7, 0xdf, 0xd4, 0xc4,
	0xf9, 0xa5, 0x2a, 0x5d, 0x5c, 0xaa, 0xd2, 0xd7, 0x4b, 0x55, 0x7a, 0x7d, 0xa5, 0x26, 0x2e, 0xae,
	0xd4, 0xc4, 0xe7, 0x2b, 0x35, 0xf1, 0x6c, 0xd5, 0x30, 0xf9, 0x61, 0xbb, 0xa1, 0x35, 0xa9, 0x55,
	0xf6, 0x98, 0x5b, 0xa8, 0xc1, 0xfc, 0x87, 0xf2, 0x49, 0xef, 0x2f, 0x8b, 0x9f, 0x3a, 0x84, 0x35,
	0x92, 0xfe, 0x0f, 0xd6, 0xe6, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x04, 0x5e, 0xfc, 0xe1, 0xfa,
	0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams updates the module params.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	// CreateCaptainNode creates a captain node and assign it to the owner.
	CreateCaptainNode(ctx context.Context, in *MsgCreateCaptainNode, opts ...grpc.CallOption) (*MsgCreateCaptainNodeResponse, error)
	// CommitReport commits the running state report of captain nodes
	CommitReport(ctx context.Context, in *MsgCommitReport, opts ...grpc.CallOption) (*MsgCommitReportResponse, error)
	// AddAuthorizedMember adds authorized members allowed to access permission interface.
	AddAuthorizedMember(ctx context.Context, in *MsgAddAuthorizedMember, opts ...grpc.CallOption) (*MsgAddAuthorizedMemberResponse, error)
	// RemoveAuthorized removes authorized members.
	RemoveAuthorizedMember(ctx context.Context, in *MsgRemoveAuthorizedMember, opts ...grpc.CallOption) (*MsgRemoveAuthorizedMemberResponse, error)
	// UpdateSaleLevel updates CurrentLevelForSale in module params.
	UpdateSaleLevel(ctx context.Context, in *MsgUpdateSaleLevel, opts ...grpc.CallOption) (*MsgUpdateSaleLevelResponse, error)
	// CommitComputingPower assign pending computing power reward to users for later claiming.
	CommitComputingPower(ctx context.Context, in *MsgCommitComputingPower, opts ...grpc.CallOption) (*MsgCommitComputingPowerResponse, error)
	// ClaimComputingPower allows captain node owner to claim and increase node's computing power.
	ClaimComputingPower(ctx context.Context, in *MsgClaimComputingPower, opts ...grpc.CallOption) (*MsgClaimComputingPowerResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/tabi.captains.v1.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateCaptainNode(ctx context.Context, in *MsgCreateCaptainNode, opts ...grpc.CallOption) (*MsgCreateCaptainNodeResponse, error) {
	out := new(MsgCreateCaptainNodeResponse)
	err := c.cc.Invoke(ctx, "/tabi.captains.v1.Msg/CreateCaptainNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CommitReport(ctx context.Context, in *MsgCommitReport, opts ...grpc.CallOption) (*MsgCommitReportResponse, error) {
	out := new(MsgCommitReportResponse)
	err := c.cc.Invoke(ctx, "/tabi.captains.v1.Msg/CommitReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddAuthorizedMember(ctx context.Context, in *MsgAddAuthorizedMember, opts ...grpc.CallOption) (*MsgAddAuthorizedMemberResponse, error) {
	out := new(MsgAddAuthorizedMemberResponse)
	err := c.cc.Invoke(ctx, "/tabi.captains.v1.Msg/AddAuthorizedMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveAuthorizedMember(ctx context.Context, in *MsgRemoveAuthorizedMember, opts ...grpc.CallOption) (*MsgRemoveAuthorizedMemberResponse, error) {
	out := new(MsgRemoveAuthorizedMemberResponse)
	err := c.cc.Invoke(ctx, "/tabi.captains.v1.Msg/RemoveAuthorizedMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateSaleLevel(ctx context.Context, in *MsgUpdateSaleLevel, opts ...grpc.CallOption) (*MsgUpdateSaleLevelResponse, error) {
	out := new(MsgUpdateSaleLevelResponse)
	err := c.cc.Invoke(ctx, "/tabi.captains.v1.Msg/UpdateSaleLevel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CommitComputingPower(ctx context.Context, in *MsgCommitComputingPower, opts ...grpc.CallOption) (*MsgCommitComputingPowerResponse, error) {
	out := new(MsgCommitComputingPowerResponse)
	err := c.cc.Invoke(ctx, "/tabi.captains.v1.Msg/CommitComputingPower", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ClaimComputingPower(ctx context.Context, in *MsgClaimComputingPower, opts ...grpc.CallOption) (*MsgClaimComputingPowerResponse, error) {
	out := new(MsgClaimComputingPowerResponse)
	err := c.cc.Invoke(ctx, "/tabi.captains.v1.Msg/ClaimComputingPower", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// UpdateParams updates the module params.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	// CreateCaptainNode creates a captain node and assign it to the owner.
	CreateCaptainNode(context.Context, *MsgCreateCaptainNode) (*MsgCreateCaptainNodeResponse, error)
	// CommitReport commits the running state report of captain nodes
	CommitReport(context.Context, *MsgCommitReport) (*MsgCommitReportResponse, error)
	// AddAuthorizedMember adds authorized members allowed to access permission interface.
	AddAuthorizedMember(context.Context, *MsgAddAuthorizedMember) (*MsgAddAuthorizedMemberResponse, error)
	// RemoveAuthorized removes authorized members.
	RemoveAuthorizedMember(context.Context, *MsgRemoveAuthorizedMember) (*MsgRemoveAuthorizedMemberResponse, error)
	// UpdateSaleLevel updates CurrentLevelForSale in module params.
	UpdateSaleLevel(context.Context, *MsgUpdateSaleLevel) (*MsgUpdateSaleLevelResponse, error)
	// CommitComputingPower assign pending computing power reward to users for later claiming.
	CommitComputingPower(context.Context, *MsgCommitComputingPower) (*MsgCommitComputingPowerResponse, error)
	// ClaimComputingPower allows captain node owner to claim and increase node's computing power.
	ClaimComputingPower(context.Context, *MsgClaimComputingPower) (*MsgClaimComputingPowerResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (*UnimplementedMsgServer) CreateCaptainNode(ctx context.Context, req *MsgCreateCaptainNode) (*MsgCreateCaptainNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCaptainNode not implemented")
}
func (*UnimplementedMsgServer) CommitReport(ctx context.Context, req *MsgCommitReport) (*MsgCommitReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitReport not implemented")
}
func (*UnimplementedMsgServer) AddAuthorizedMember(ctx context.Context, req *MsgAddAuthorizedMember) (*MsgAddAuthorizedMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAuthorizedMember not implemented")
}
func (*UnimplementedMsgServer) RemoveAuthorizedMember(ctx context.Context, req *MsgRemoveAuthorizedMember) (*MsgRemoveAuthorizedMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAuthorizedMember not implemented")
}
func (*UnimplementedMsgServer) UpdateSaleLevel(ctx context.Context, req *MsgUpdateSaleLevel) (*MsgUpdateSaleLevelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSaleLevel not implemented")
}
func (*UnimplementedMsgServer) CommitComputingPower(ctx context.Context, req *MsgCommitComputingPower) (*MsgCommitComputingPowerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitComputingPower not implemented")
}
func (*UnimplementedMsgServer) ClaimComputingPower(ctx context.Context, req *MsgClaimComputingPower) (*MsgClaimComputingPowerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimComputingPower not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabi.captains.v1.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateCaptainNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateCaptainNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateCaptainNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabi.captains.v1.Msg/CreateCaptainNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateCaptainNode(ctx, req.(*MsgCreateCaptainNode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CommitReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCommitReport)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CommitReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabi.captains.v1.Msg/CommitReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CommitReport(ctx, req.(*MsgCommitReport))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddAuthorizedMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddAuthorizedMember)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddAuthorizedMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabi.captains.v1.Msg/AddAuthorizedMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddAuthorizedMember(ctx, req.(*MsgAddAuthorizedMember))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveAuthorizedMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveAuthorizedMember)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveAuthorizedMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabi.captains.v1.Msg/RemoveAuthorizedMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveAuthorizedMember(ctx, req.(*MsgRemoveAuthorizedMember))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateSaleLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateSaleLevel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateSaleLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabi.captains.v1.Msg/UpdateSaleLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateSaleLevel(ctx, req.(*MsgUpdateSaleLevel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CommitComputingPower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCommitComputingPower)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CommitComputingPower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabi.captains.v1.Msg/CommitComputingPower",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CommitComputingPower(ctx, req.(*MsgCommitComputingPower))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ClaimComputingPower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgClaimComputingPower)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ClaimComputingPower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabi.captains.v1.Msg/ClaimComputingPower",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ClaimComputingPower(ctx, req.(*MsgClaimComputingPower))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tabi.captains.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "CreateCaptainNode",
			Handler:    _Msg_CreateCaptainNode_Handler,
		},
		{
			MethodName: "CommitReport",
			Handler:    _Msg_CommitReport_Handler,
		},
		{
			MethodName: "AddAuthorizedMember",
			Handler:    _Msg_AddAuthorizedMember_Handler,
		},
		{
			MethodName: "RemoveAuthorizedMember",
			Handler:    _Msg_RemoveAuthorizedMember_Handler,
		},
		{
			MethodName: "UpdateSaleLevel",
			Handler:    _Msg_UpdateSaleLevel_Handler,
		},
		{
			MethodName: "CommitComputingPower",
			Handler:    _Msg_CommitComputingPower_Handler,
		},
		{
			MethodName: "ClaimComputingPower",
			Handler:    _Msg_ClaimComputingPower_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tabi/captains/v1/tx.proto",
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateCaptainNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateCaptainNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateCaptainNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DivisionId) > 0 {
		i -= len(m.DivisionId)
		copy(dAtA[i:], m.DivisionId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DivisionId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateCaptainNodeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateCaptainNodeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateCaptainNodeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCommitReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCommitReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCommitReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Report) > 0 {
		i -= len(m.Report)
		copy(dAtA[i:], m.Report)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Report)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCommitReportResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCommitReportResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCommitReportResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddAuthorizedMember) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddAuthorizedMember) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddAuthorizedMember) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Members) > 0 {
		for iNdEx := len(m.Members) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Members[iNdEx])
			copy(dAtA[i:], m.Members[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Members[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddAuthorizedMemberResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddAuthorizedMemberResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddAuthorizedMemberResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRemoveAuthorizedMember) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveAuthorizedMember) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveAuthorizedMember) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Members) > 0 {
		for iNdEx := len(m.Members) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Members[iNdEx])
			copy(dAtA[i:], m.Members[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Members[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveAuthorizedMemberResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveAuthorizedMemberResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveAuthorizedMemberResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateSaleLevel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateSaleLevel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateSaleLevel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SaleLevel != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.SaleLevel))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateSaleLevelResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateSaleLevelResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateSaleLevelResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCommitComputingPower) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCommitComputingPower) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCommitComputingPower) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ComputingPowerRewards) > 0 {
		for iNdEx := len(m.ComputingPowerRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ComputingPowerRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCommitComputingPowerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCommitComputingPowerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCommitComputingPowerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgClaimComputingPower) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimComputingPower) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimComputingPower) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NodeId) > 0 {
		i -= len(m.NodeId)
		copy(dAtA[i:], m.NodeId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NodeId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ComputingPowerAmount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ComputingPowerAmount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgClaimComputingPowerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimComputingPowerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimComputingPowerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateCaptainNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DivisionId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateCaptainNodeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCommitReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Report)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCommitReportResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddAuthorizedMember) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Members) > 0 {
		for _, s := range m.Members {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgAddAuthorizedMemberResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRemoveAuthorizedMember) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Members) > 0 {
		for _, s := range m.Members {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgRemoveAuthorizedMemberResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateSaleLevel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.SaleLevel != 0 {
		n += 1 + sovTx(uint64(m.SaleLevel))
	}
	return n
}

func (m *MsgUpdateSaleLevelResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCommitComputingPower) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.ComputingPowerRewards) > 0 {
		for _, e := range m.ComputingPowerRewards {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgCommitComputingPowerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgClaimComputingPower) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ComputingPowerAmount != 0 {
		n += 1 + sovTx(uint64(m.ComputingPowerAmount))
	}
	l = len(m.NodeId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgClaimComputingPowerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateCaptainNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateCaptainNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateCaptainNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DivisionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DivisionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateCaptainNodeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateCaptainNodeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateCaptainNodeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCommitReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCommitReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCommitReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Report", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Report = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCommitReportResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCommitReportResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCommitReportResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddAuthorizedMember) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddAuthorizedMember: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddAuthorizedMember: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddAuthorizedMemberResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddAuthorizedMemberResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddAuthorizedMemberResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveAuthorizedMember) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveAuthorizedMember: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveAuthorizedMember: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveAuthorizedMemberResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveAuthorizedMemberResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveAuthorizedMemberResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateSaleLevel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateSaleLevel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateSaleLevel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SaleLevel", wireType)
			}
			m.SaleLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SaleLevel |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateSaleLevelResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateSaleLevelResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateSaleLevelResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCommitComputingPower) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCommitComputingPower: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCommitComputingPower: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComputingPowerRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ComputingPowerRewards = append(m.ComputingPowerRewards, &ClaimableComputingPower{})
			if err := m.ComputingPowerRewards[len(m.ComputingPowerRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCommitComputingPowerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCommitComputingPowerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCommitComputingPowerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimComputingPower) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimComputingPower: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimComputingPower: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComputingPowerAmount", wireType)
			}
			m.ComputingPowerAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ComputingPowerAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimComputingPowerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimComputingPowerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimComputingPowerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
