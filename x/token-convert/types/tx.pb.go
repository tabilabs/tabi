// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tabi/token-convert/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgConvertTabi represents a message to convert Tabi to Vetabi.
type MsgConvertTabi struct {
	Coin   types.Coin `protobuf:"bytes,1,opt,name=coin,proto3" json:"coin"`
	Sender string     `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgConvertTabi) Reset()         { *m = MsgConvertTabi{} }
func (m *MsgConvertTabi) String() string { return proto.CompactTextString(m) }
func (*MsgConvertTabi) ProtoMessage()    {}
func (*MsgConvertTabi) Descriptor() ([]byte, []int) {
	return fileDescriptor_f967002ae4f42118, []int{0}
}
func (m *MsgConvertTabi) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgConvertTabi) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgConvertTabi.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgConvertTabi) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgConvertTabi.Merge(m, src)
}
func (m *MsgConvertTabi) XXX_Size() int {
	return m.Size()
}
func (m *MsgConvertTabi) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgConvertTabi.DiscardUnknown(m)
}

var xxx_messageInfo_MsgConvertTabi proto.InternalMessageInfo

func (m *MsgConvertTabi) GetCoin() types.Coin {
	if m != nil {
		return m.Coin
	}
	return types.Coin{}
}

func (m *MsgConvertTabi) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

// MsgConvertTabiResponse defines the Msg/ConvertTabi response type.
type MsgConvertTabiResponse struct {
}

func (m *MsgConvertTabiResponse) Reset()         { *m = MsgConvertTabiResponse{} }
func (m *MsgConvertTabiResponse) String() string { return proto.CompactTextString(m) }
func (*MsgConvertTabiResponse) ProtoMessage()    {}
func (*MsgConvertTabiResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f967002ae4f42118, []int{1}
}
func (m *MsgConvertTabiResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgConvertTabiResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgConvertTabiResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgConvertTabiResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgConvertTabiResponse.Merge(m, src)
}
func (m *MsgConvertTabiResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgConvertTabiResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgConvertTabiResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgConvertTabiResponse proto.InternalMessageInfo

// MsgConvertVetabi represents a message to convert Vetabi to Tabi.
type MsgConvertVetabi struct {
	Coin     types.Coin `protobuf:"bytes,1,opt,name=coin,proto3" json:"coin"`
	Strategy string     `protobuf:"bytes,2,opt,name=strategy,proto3" json:"strategy,omitempty"`
	Sender   string     `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgConvertVetabi) Reset()         { *m = MsgConvertVetabi{} }
func (m *MsgConvertVetabi) String() string { return proto.CompactTextString(m) }
func (*MsgConvertVetabi) ProtoMessage()    {}
func (*MsgConvertVetabi) Descriptor() ([]byte, []int) {
	return fileDescriptor_f967002ae4f42118, []int{2}
}
func (m *MsgConvertVetabi) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgConvertVetabi) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgConvertVetabi.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgConvertVetabi) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgConvertVetabi.Merge(m, src)
}
func (m *MsgConvertVetabi) XXX_Size() int {
	return m.Size()
}
func (m *MsgConvertVetabi) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgConvertVetabi.DiscardUnknown(m)
}

var xxx_messageInfo_MsgConvertVetabi proto.InternalMessageInfo

func (m *MsgConvertVetabi) GetCoin() types.Coin {
	if m != nil {
		return m.Coin
	}
	return types.Coin{}
}

func (m *MsgConvertVetabi) GetStrategy() string {
	if m != nil {
		return m.Strategy
	}
	return ""
}

func (m *MsgConvertVetabi) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

// MsgConvertVetabiResponse defines the Msg/ConvertVetabi response type.
type MsgConvertVetabiResponse struct {
	VoucherId  string `protobuf:"bytes,1,opt,name=voucher_id,json=voucherId,proto3" json:"voucher_id,omitempty"`
	ExpiryTime string `protobuf:"bytes,2,opt,name=expiry_time,json=expiryTime,proto3" json:"expiry_time,omitempty"`
}

func (m *MsgConvertVetabiResponse) Reset()         { *m = MsgConvertVetabiResponse{} }
func (m *MsgConvertVetabiResponse) String() string { return proto.CompactTextString(m) }
func (*MsgConvertVetabiResponse) ProtoMessage()    {}
func (*MsgConvertVetabiResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f967002ae4f42118, []int{3}
}
func (m *MsgConvertVetabiResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgConvertVetabiResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgConvertVetabiResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgConvertVetabiResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgConvertVetabiResponse.Merge(m, src)
}
func (m *MsgConvertVetabiResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgConvertVetabiResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgConvertVetabiResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgConvertVetabiResponse proto.InternalMessageInfo

func (m *MsgConvertVetabiResponse) GetVoucherId() string {
	if m != nil {
		return m.VoucherId
	}
	return ""
}

func (m *MsgConvertVetabiResponse) GetExpiryTime() string {
	if m != nil {
		return m.ExpiryTime
	}
	return ""
}

// MsgWithdrawTabi represents a message to withdraw Tabi as per voucher.
type MsgWithdrawTabi struct {
	VoucherId string `protobuf:"bytes,1,opt,name=voucher_id,json=voucherId,proto3" json:"voucher_id,omitempty"`
	Sender    string `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgWithdrawTabi) Reset()         { *m = MsgWithdrawTabi{} }
func (m *MsgWithdrawTabi) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawTabi) ProtoMessage()    {}
func (*MsgWithdrawTabi) Descriptor() ([]byte, []int) {
	return fileDescriptor_f967002ae4f42118, []int{4}
}
func (m *MsgWithdrawTabi) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawTabi) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawTabi.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawTabi) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawTabi.Merge(m, src)
}
func (m *MsgWithdrawTabi) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawTabi) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawTabi.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawTabi proto.InternalMessageInfo

func (m *MsgWithdrawTabi) GetVoucherId() string {
	if m != nil {
		return m.VoucherId
	}
	return ""
}

func (m *MsgWithdrawTabi) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

// MsgWithdrawTabiResponse defines the Msg/WithdrawTabi response type.
type MsgWithdrawTabiResponse struct {
	TabiWithdrawn  types.Coin `protobuf:"bytes,1,opt,name=tabi_withdrawn,json=tabiWithdrawn,proto3" json:"tabi_withdrawn"`
	VetabiReturned types.Coin `protobuf:"bytes,2,opt,name=vetabi_returned,json=vetabiReturned,proto3" json:"vetabi_returned"`
}

func (m *MsgWithdrawTabiResponse) Reset()         { *m = MsgWithdrawTabiResponse{} }
func (m *MsgWithdrawTabiResponse) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawTabiResponse) ProtoMessage()    {}
func (*MsgWithdrawTabiResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f967002ae4f42118, []int{5}
}
func (m *MsgWithdrawTabiResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawTabiResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawTabiResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawTabiResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawTabiResponse.Merge(m, src)
}
func (m *MsgWithdrawTabiResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawTabiResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawTabiResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawTabiResponse proto.InternalMessageInfo

func (m *MsgWithdrawTabiResponse) GetTabiWithdrawn() types.Coin {
	if m != nil {
		return m.TabiWithdrawn
	}
	return types.Coin{}
}

func (m *MsgWithdrawTabiResponse) GetVetabiReturned() types.Coin {
	if m != nil {
		return m.VetabiReturned
	}
	return types.Coin{}
}

// MsgCancelConvert represents a message to cancel the conversion of Vetabi to Tabi.
type MsgCancelConvert struct {
	VoucherId string `protobuf:"bytes,1,opt,name=voucher_id,json=voucherId,proto3" json:"voucher_id,omitempty"`
	Sender    string `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgCancelConvert) Reset()         { *m = MsgCancelConvert{} }
func (m *MsgCancelConvert) String() string { return proto.CompactTextString(m) }
func (*MsgCancelConvert) ProtoMessage()    {}
func (*MsgCancelConvert) Descriptor() ([]byte, []int) {
	return fileDescriptor_f967002ae4f42118, []int{6}
}
func (m *MsgCancelConvert) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelConvert) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelConvert.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelConvert) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelConvert.Merge(m, src)
}
func (m *MsgCancelConvert) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelConvert) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelConvert.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelConvert proto.InternalMessageInfo

func (m *MsgCancelConvert) GetVoucherId() string {
	if m != nil {
		return m.VoucherId
	}
	return ""
}

func (m *MsgCancelConvert) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

// MsgCancelConvertResponse defines the Msg/CancelConvert response type.
type MsgCancelConvertResponse struct {
	VetabiUnlocked types.Coin `protobuf:"bytes,1,opt,name=vetabi_unlocked,json=vetabiUnlocked,proto3" json:"vetabi_unlocked"`
}

func (m *MsgCancelConvertResponse) Reset()         { *m = MsgCancelConvertResponse{} }
func (m *MsgCancelConvertResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCancelConvertResponse) ProtoMessage()    {}
func (*MsgCancelConvertResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f967002ae4f42118, []int{7}
}
func (m *MsgCancelConvertResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelConvertResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelConvertResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelConvertResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelConvertResponse.Merge(m, src)
}
func (m *MsgCancelConvertResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelConvertResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelConvertResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelConvertResponse proto.InternalMessageInfo

func (m *MsgCancelConvertResponse) GetVetabiUnlocked() types.Coin {
	if m != nil {
		return m.VetabiUnlocked
	}
	return types.Coin{}
}

func init() {
	proto.RegisterType((*MsgConvertTabi)(nil), "tabi.token_convert.v1.MsgConvertTabi")
	proto.RegisterType((*MsgConvertTabiResponse)(nil), "tabi.token_convert.v1.MsgConvertTabiResponse")
	proto.RegisterType((*MsgConvertVetabi)(nil), "tabi.token_convert.v1.MsgConvertVetabi")
	proto.RegisterType((*MsgConvertVetabiResponse)(nil), "tabi.token_convert.v1.MsgConvertVetabiResponse")
	proto.RegisterType((*MsgWithdrawTabi)(nil), "tabi.token_convert.v1.MsgWithdrawTabi")
	proto.RegisterType((*MsgWithdrawTabiResponse)(nil), "tabi.token_convert.v1.MsgWithdrawTabiResponse")
	proto.RegisterType((*MsgCancelConvert)(nil), "tabi.token_convert.v1.MsgCancelConvert")
	proto.RegisterType((*MsgCancelConvertResponse)(nil), "tabi.token_convert.v1.MsgCancelConvertResponse")
}

func init() { proto.RegisterFile("tabi/token-convert/v1/tx.proto", fileDescriptor_f967002ae4f42118) }

var fileDescriptor_f967002ae4f42118 = []byte{
	// 546 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xcd, 0x6e, 0x13, 0x31,
	0x10, 0xce, 0x92, 0xaa, 0x22, 0x0e, 0x4d, 0xd1, 0xaa, 0x40, 0xba, 0x12, 0xdb, 0x2a, 0x12, 0xd0,
	0x4b, 0x6c, 0xd2, 0x3e, 0x01, 0xa9, 0x84, 0xca, 0x21, 0x97, 0x50, 0x40, 0xea, 0x65, 0xb5, 0x3f,
	0xc3, 0xc6, 0x6a, 0x62, 0x47, 0xb6, 0xb3, 0x49, 0xde, 0x82, 0x0b, 0xef, 0x80, 0xc4, 0x95, 0x87,
	0xe8, 0xb1, 0xe2, 0xc4, 0x09, 0xa1, 0xe4, 0x45, 0xd0, 0xae, 0xdd, 0x74, 0x37, 0x2a, 0xed, 0x82,
	0xb8, 0xd9, 0xfe, 0xbe, 0x99, 0xf9, 0xe6, 0xb3, 0xc7, 0xc8, 0x55, 0x7e, 0x40, 0x89, 0xe2, 0xe7,
	0xc0, 0xda, 0x21, 0x67, 0x09, 0x08, 0x45, 0x92, 0x0e, 0x51, 0x33, 0x3c, 0x16, 0x5c, 0x71, 0xfb,
	0x51, 0x8a, 0xe3, 0x0c, 0xf7, 0x0c, 0x8e, 0x93, 0x8e, 0xb3, 0x13, 0xf3, 0x98, 0x67, 0x0c, 0x92,
	0xae, 0x34, 0xd9, 0x71, 0x43, 0x2e, 0x47, 0x5c, 0x92, 0xc0, 0x97, 0x40, 0x92, 0x4e, 0x00, 0xca,
	0xef, 0x90, 0x90, 0x53, 0x66, 0xf0, 0x5d, 0x8d, 0x7b, 0x3a, 0x50, 0x6f, 0x34, 0xd4, 0x9a, 0xa2,
	0x46, 0x4f, 0xc6, 0xc7, 0xba, 0xc2, 0xa9, 0x1f, 0x50, 0xfb, 0x08, 0x6d, 0xa4, 0xa1, 0x4d, 0x6b,
	0xdf, 0x3a, 0xa8, 0x1f, 0xee, 0x62, 0x43, 0x4f, 0x73, 0x63, 0x93, 0x1b, 0x1f, 0x73, 0xca, 0xba,
	0x1b, 0x17, 0x3f, 0xf7, 0x2a, 0xfd, 0x8c, 0x6c, 0xbf, 0x44, 0x9b, 0x12, 0x58, 0x04, 0xa2, 0x79,
	0x6f, 0xdf, 0x3a, 0xa8, 0x75, 0x9b, 0xdf, 0xbf, 0xb5, 0x77, 0x4c, 0xe4, 0xab, 0x28, 0x12, 0x20,
	0xe5, 0x5b, 0x25, 0x28, 0x8b, 0xfb, 0x86, 0xd7, 0x6a, 0xa2, 0xc7, 0xc5, 0xc2, 0x7d, 0x90, 0x63,
	0xce, 0x24, 0xb4, 0x3e, 0x5b, 0xe8, 0xe1, 0x35, 0xf4, 0x1e, 0xd4, 0x3f, 0xab, 0x72, 0xd0, 0x7d,
	0xa9, 0x84, 0xaf, 0x20, 0x9e, 0x6b, 0x5d, 0xfd, 0xd5, 0x3e, 0xa7, 0xb8, 0x5a, 0x52, 0xf1, 0x19,
	0x6a, 0xae, 0xcb, 0xba, 0xd2, 0x6c, 0x3f, 0x45, 0x28, 0xe1, 0x93, 0x70, 0x00, 0xc2, 0xa3, 0x51,
	0x26, 0xb2, 0xd6, 0xaf, 0x99, 0x93, 0x37, 0x91, 0xbd, 0x87, 0xea, 0x30, 0x1b, 0x53, 0x31, 0xf7,
	0x14, 0x1d, 0x81, 0xd1, 0x82, 0xf4, 0xd1, 0x29, 0x1d, 0x41, 0x2b, 0x40, 0xdb, 0x3d, 0x19, 0x7f,
	0xa0, 0x6a, 0x10, 0x09, 0x7f, 0x9a, 0xdd, 0xc3, 0x1d, 0x29, 0xff, 0xde, 0xf1, 0xaf, 0x16, 0x7a,
	0xb2, 0x56, 0x64, 0xa5, 0xff, 0x35, 0x6a, 0xa4, 0xfd, 0x78, 0x53, 0x03, 0x96, 0x36, 0x7a, 0x2b,
	0x0d, 0xbb, 0x4a, 0xc9, 0xec, 0x13, 0xb4, 0x9d, 0x64, 0xce, 0x78, 0x02, 0xd4, 0x44, 0x30, 0x88,
	0x32, 0x79, 0x25, 0x12, 0x35, 0x12, 0xe3, 0xa8, 0x0e, 0x6b, 0x85, 0xfa, 0x11, 0xf8, 0x2c, 0x84,
	0xa1, 0xf1, 0xfc, 0xff, 0x5b, 0x12, 0xe9, 0x2b, 0xcd, 0x17, 0x59, 0x59, 0x72, 0xdd, 0xca, 0x84,
	0x0d, 0x79, 0x78, 0x0e, 0x51, 0x59, 0x4f, 0x4c, 0x2b, 0xef, 0x4c, 0xd8, 0xe1, 0x97, 0x2a, 0xaa,
	0xf6, 0x64, 0x6c, 0x87, 0xa8, 0x9e, 0x1f, 0xb4, 0x67, 0xf8, 0xc6, 0x19, 0xc7, 0xc5, 0xb1, 0x70,
	0xda, 0xa5, 0x68, 0x2b, 0xd9, 0x14, 0x6d, 0x15, 0x27, 0xe7, 0xc5, 0x9d, 0xf1, 0x9a, 0xe8, 0x90,
	0x92, 0xc4, 0x55, 0xa9, 0x8f, 0xe8, 0x41, 0xe1, 0xc5, 0x3e, 0xff, 0x73, 0x82, 0x3c, 0xcf, 0xc1,
	0xe5, 0x78, 0x85, 0x96, 0x0a, 0xef, 0xe0, 0xb6, 0x96, 0xf2, 0xc4, 0x5b, 0x5b, 0xba, 0xe9, 0xd2,
	0xbb, 0x27, 0x17, 0x0b, 0xd7, 0xba, 0x5c, 0xb8, 0xd6, 0xaf, 0x85, 0x6b, 0x7d, 0x5a, 0xba, 0x95,
	0xcb, 0xa5, 0x5b, 0xf9, 0xb1, 0x74, 0x2b, 0x67, 0x38, 0xa6, 0x6a, 0x30, 0x09, 0x70, 0xc8, 0x47,
	0x24, 0x4d, 0x3a, 0xf4, 0x03, 0x99, 0x2d, 0xc8, 0x6c, 0xed, 0x1b, 0x57, 0xf3, 0x31, 0xc8, 0x60,
	0x33, 0xfb, 0x5f, 0x8f, 0x7e, 0x07, 0x00, 0x00, 0xff, 0xff, 0x96, 0x52, 0xb0, 0xb3, 0xe9, 0x05,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// ConvertTabi converts Tabi to Vetabi at a 1:1 ratio.
	ConvertTabi(ctx context.Context, in *MsgConvertTabi, opts ...grpc.CallOption) (*MsgConvertTabiResponse, error)
	// ConvertVetabi converts Vetabi to Tabi with the given unlock strategy
	// and return a voucher for redeeming Tabi.
	ConvertVetabi(ctx context.Context, in *MsgConvertVetabi, opts ...grpc.CallOption) (*MsgConvertVetabiResponse, error)
	// WithdrawTabi sends the unlocked Tabi to owner of the voucher and
	// burns Vetabi as well as Tabi according to the unlock strategy.
	WithdrawTabi(ctx context.Context, in *MsgWithdrawTabi, opts ...grpc.CallOption) (*MsgWithdrawTabiResponse, error)
	// CancelConvert cancels the conversion of Vetabi to Tabi.
	CancelConvert(ctx context.Context, in *MsgCancelConvert, opts ...grpc.CallOption) (*MsgCancelConvertResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) ConvertTabi(ctx context.Context, in *MsgConvertTabi, opts ...grpc.CallOption) (*MsgConvertTabiResponse, error) {
	out := new(MsgConvertTabiResponse)
	err := c.cc.Invoke(ctx, "/tabi.token_convert.v1.Msg/ConvertTabi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ConvertVetabi(ctx context.Context, in *MsgConvertVetabi, opts ...grpc.CallOption) (*MsgConvertVetabiResponse, error) {
	out := new(MsgConvertVetabiResponse)
	err := c.cc.Invoke(ctx, "/tabi.token_convert.v1.Msg/ConvertVetabi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) WithdrawTabi(ctx context.Context, in *MsgWithdrawTabi, opts ...grpc.CallOption) (*MsgWithdrawTabiResponse, error) {
	out := new(MsgWithdrawTabiResponse)
	err := c.cc.Invoke(ctx, "/tabi.token_convert.v1.Msg/WithdrawTabi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CancelConvert(ctx context.Context, in *MsgCancelConvert, opts ...grpc.CallOption) (*MsgCancelConvertResponse, error) {
	out := new(MsgCancelConvertResponse)
	err := c.cc.Invoke(ctx, "/tabi.token_convert.v1.Msg/CancelConvert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// ConvertTabi converts Tabi to Vetabi at a 1:1 ratio.
	ConvertTabi(context.Context, *MsgConvertTabi) (*MsgConvertTabiResponse, error)
	// ConvertVetabi converts Vetabi to Tabi with the given unlock strategy
	// and return a voucher for redeeming Tabi.
	ConvertVetabi(context.Context, *MsgConvertVetabi) (*MsgConvertVetabiResponse, error)
	// WithdrawTabi sends the unlocked Tabi to owner of the voucher and
	// burns Vetabi as well as Tabi according to the unlock strategy.
	WithdrawTabi(context.Context, *MsgWithdrawTabi) (*MsgWithdrawTabiResponse, error)
	// CancelConvert cancels the conversion of Vetabi to Tabi.
	CancelConvert(context.Context, *MsgCancelConvert) (*MsgCancelConvertResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) ConvertTabi(ctx context.Context, req *MsgConvertTabi) (*MsgConvertTabiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConvertTabi not implemented")
}
func (*UnimplementedMsgServer) ConvertVetabi(ctx context.Context, req *MsgConvertVetabi) (*MsgConvertVetabiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConvertVetabi not implemented")
}
func (*UnimplementedMsgServer) WithdrawTabi(ctx context.Context, req *MsgWithdrawTabi) (*MsgWithdrawTabiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawTabi not implemented")
}
func (*UnimplementedMsgServer) CancelConvert(ctx context.Context, req *MsgCancelConvert) (*MsgCancelConvertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelConvert not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_ConvertTabi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgConvertTabi)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ConvertTabi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabi.token_convert.v1.Msg/ConvertTabi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ConvertTabi(ctx, req.(*MsgConvertTabi))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ConvertVetabi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgConvertVetabi)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ConvertVetabi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabi.token_convert.v1.Msg/ConvertVetabi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ConvertVetabi(ctx, req.(*MsgConvertVetabi))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_WithdrawTabi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWithdrawTabi)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).WithdrawTabi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabi.token_convert.v1.Msg/WithdrawTabi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).WithdrawTabi(ctx, req.(*MsgWithdrawTabi))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CancelConvert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCancelConvert)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CancelConvert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabi.token_convert.v1.Msg/CancelConvert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CancelConvert(ctx, req.(*MsgCancelConvert))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tabi.token_convert.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConvertTabi",
			Handler:    _Msg_ConvertTabi_Handler,
		},
		{
			MethodName: "ConvertVetabi",
			Handler:    _Msg_ConvertVetabi_Handler,
		},
		{
			MethodName: "WithdrawTabi",
			Handler:    _Msg_WithdrawTabi_Handler,
		},
		{
			MethodName: "CancelConvert",
			Handler:    _Msg_CancelConvert_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tabi/token-convert/v1/tx.proto",
}

func (m *MsgConvertTabi) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgConvertTabi) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgConvertTabi) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Coin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgConvertTabiResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgConvertTabiResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgConvertTabiResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgConvertVetabi) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgConvertVetabi) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgConvertVetabi) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Strategy) > 0 {
		i -= len(m.Strategy)
		copy(dAtA[i:], m.Strategy)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Strategy)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Coin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgConvertVetabiResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgConvertVetabiResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgConvertVetabiResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExpiryTime) > 0 {
		i -= len(m.ExpiryTime)
		copy(dAtA[i:], m.ExpiryTime)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ExpiryTime)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.VoucherId) > 0 {
		i -= len(m.VoucherId)
		copy(dAtA[i:], m.VoucherId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VoucherId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawTabi) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawTabi) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawTabi) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.VoucherId) > 0 {
		i -= len(m.VoucherId)
		copy(dAtA[i:], m.VoucherId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VoucherId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawTabiResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawTabiResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawTabiResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.VetabiReturned.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.TabiWithdrawn.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgCancelConvert) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelConvert) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelConvert) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.VoucherId) > 0 {
		i -= len(m.VoucherId)
		copy(dAtA[i:], m.VoucherId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VoucherId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelConvertResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelConvertResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelConvertResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.VetabiUnlocked.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgConvertTabi) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Coin.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgConvertTabiResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgConvertVetabi) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Coin.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Strategy)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgConvertVetabiResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VoucherId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ExpiryTime)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgWithdrawTabi) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VoucherId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgWithdrawTabiResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TabiWithdrawn.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.VetabiReturned.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgCancelConvert) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VoucherId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCancelConvertResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.VetabiUnlocked.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgConvertTabi) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgConvertTabi: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgConvertTabi: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Coin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgConvertTabiResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgConvertTabiResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgConvertTabiResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgConvertVetabi) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgConvertVetabi: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgConvertVetabi: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Coin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Strategy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Strategy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgConvertVetabiResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgConvertVetabiResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgConvertVetabiResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoucherId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoucherId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiryTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpiryTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawTabi) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawTabi: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawTabi: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoucherId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoucherId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawTabiResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawTabiResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawTabiResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TabiWithdrawn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TabiWithdrawn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VetabiReturned", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VetabiReturned.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelConvert) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelConvert: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelConvert: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoucherId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VoucherId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelConvertResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelConvertResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelConvertResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VetabiUnlocked", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VetabiUnlocked.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
