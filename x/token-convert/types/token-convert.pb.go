// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tabi/token-convert/v1/token-convert.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Strategy defines the unlock strategy for conversion from Vetabi to Tabi.
type Strategy struct {
	// name is the unique name of the strategy.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// period represents the lock time in seconds.
	Period int64 `protobuf:"varint,2,opt,name=period,proto3" json:"period,omitempty"`
	// conversion_rate is the conversion rate from Vetabi to Tabi.
	ConversionRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=conversion_rate,json=conversionRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"conversion_rate"`
}

func (m *Strategy) Reset()         { *m = Strategy{} }
func (m *Strategy) String() string { return proto.CompactTextString(m) }
func (*Strategy) ProtoMessage()    {}
func (*Strategy) Descriptor() ([]byte, []int) {
	return fileDescriptor_686f71fe5c078aec, []int{0}
}
func (m *Strategy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Strategy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Strategy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Strategy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Strategy.Merge(m, src)
}
func (m *Strategy) XXX_Size() int {
	return m.Size()
}
func (m *Strategy) XXX_DiscardUnknown() {
	xxx_messageInfo_Strategy.DiscardUnknown(m)
}

var xxx_messageInfo_Strategy proto.InternalMessageInfo

func (m *Strategy) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Strategy) GetPeriod() int64 {
	if m != nil {
		return m.Period
	}
	return 0
}

// Voucher defines the voucher for redeeming locked token.
type Voucher struct {
	// id is the unique identifier of the voucher.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// owner is the address of the owner of the voucher.
	Owner string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	// amount represents token the voucher locked.
	Amount types.Coin `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount"`
	// created_time is the time when the voucher was created.
	CreatedTime int64 `protobuf:"varint,4,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	// strategy is the unique name of the strategy.
	Strategy string `protobuf:"bytes,5,opt,name=strategy,proto3" json:"strategy,omitempty"`
}

func (m *Voucher) Reset()         { *m = Voucher{} }
func (m *Voucher) String() string { return proto.CompactTextString(m) }
func (*Voucher) ProtoMessage()    {}
func (*Voucher) Descriptor() ([]byte, []int) {
	return fileDescriptor_686f71fe5c078aec, []int{1}
}
func (m *Voucher) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Voucher) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Voucher.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Voucher) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Voucher.Merge(m, src)
}
func (m *Voucher) XXX_Size() int {
	return m.Size()
}
func (m *Voucher) XXX_DiscardUnknown() {
	xxx_messageInfo_Voucher.DiscardUnknown(m)
}

var xxx_messageInfo_Voucher proto.InternalMessageInfo

func (m *Voucher) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Voucher) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Voucher) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func (m *Voucher) GetCreatedTime() int64 {
	if m != nil {
		return m.CreatedTime
	}
	return 0
}

func (m *Voucher) GetStrategy() string {
	if m != nil {
		return m.Strategy
	}
	return ""
}

func init() {
	proto.RegisterType((*Strategy)(nil), "tabi.token_convert.v1.Strategy")
	proto.RegisterType((*Voucher)(nil), "tabi.token_convert.v1.Voucher")
}

func init() {
	proto.RegisterFile("tabi/token-convert/v1/token-convert.proto", fileDescriptor_686f71fe5c078aec)
}

var fileDescriptor_686f71fe5c078aec = []byte{
	// 409 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x52, 0xbd, 0x6e, 0x14, 0x31,
	0x10, 0x3e, 0x5f, 0x2e, 0x47, 0xe2, 0xa0, 0x20, 0x59, 0x01, 0x6d, 0xae, 0xd8, 0x84, 0x14, 0x28,
	0x14, 0x67, 0x6b, 0xa1, 0xa0, 0xa1, 0x61, 0x49, 0x41, 0xbd, 0x41, 0x14, 0x34, 0x2b, 0xaf, 0x77,
	0xb4, 0xb1, 0xc2, 0x7a, 0x4e, 0xb6, 0x6f, 0x21, 0x6f, 0xc1, 0x0b, 0xf0, 0x16, 0x79, 0x01, 0xba,
	0x94, 0x51, 0x2a, 0x44, 0x71, 0x42, 0x77, 0x2f, 0x82, 0xd6, 0x6b, 0x7e, 0x2b, 0xcf, 0xcc, 0xf7,
	0xcd, 0xf8, 0xf3, 0x37, 0xa6, 0x4f, 0xbd, 0xac, 0xb4, 0xf0, 0x78, 0x09, 0x66, 0xae, 0xd0, 0x74,
	0x60, 0xbd, 0xe8, 0xb2, 0x7f, 0x0b, 0x7c, 0x61, 0xd1, 0x23, 0x7b, 0xd8, 0x53, 0x79, 0x40, 0xca,
	0x5f, 0x48, 0x97, 0xcd, 0x0e, 0x1a, 0x6c, 0x30, 0x30, 0x44, 0x1f, 0x0d, 0xe4, 0x59, 0xaa, 0xd0,
	0xb5, 0xe8, 0x44, 0x25, 0x1d, 0x88, 0x2e, 0xab, 0xc0, 0xcb, 0x4c, 0x28, 0xd4, 0x26, 0xe2, 0x87,
	0x03, 0x5e, 0x0e, 0x8d, 0x43, 0x32, 0x40, 0x27, 0x5f, 0x08, 0xdd, 0x39, 0xf7, 0x56, 0x7a, 0x68,
	0xae, 0x18, 0xa3, 0x13, 0x23, 0x5b, 0x48, 0xc8, 0x31, 0x39, 0xdd, 0x2d, 0x42, 0xcc, 0x1e, 0xd1,
	0xe9, 0x02, 0xac, 0xc6, 0x3a, 0x19, 0x1f, 0x93, 0xd3, 0xad, 0x22, 0x66, 0x0c, 0xe8, 0x83, 0x41,
	0x97, 0xd3, 0x68, 0xca, 0x7e, 0x40, 0xb2, 0xd5, 0xb7, 0xe5, 0x2f, 0x6f, 0x56, 0x47, 0xa3, 0xef,
	0xab, 0xa3, 0x27, 0x8d, 0xf6, 0x17, 0xcb, 0x8a, 0x2b, 0x6c, 0xe3, 0x95, 0xf1, 0x98, 0xbb, 0xfa,
	0x52, 0xf8, 0xab, 0x05, 0x38, 0x7e, 0x06, 0xea, 0xee, 0x7a, 0x4e, 0xa3, 0xa2, 0x33, 0x50, 0xc5,
	0xfe, 0x9f, 0xa1, 0x85, 0xf4, 0x70, 0xf2, 0x95, 0xd0, 0x7b, 0xef, 0x70, 0xa9, 0x2e, 0xc0, 0xb2,
	0x7d, 0x3a, 0xd6, 0x75, 0x14, 0x37, 0xd6, 0x35, 0xe3, 0x74, 0x1b, 0x3f, 0x1a, 0xb0, 0x41, 0xd9,
	0x6e, 0x9e, 0xdc, 0x5d, 0xcf, 0x0f, 0xe2, 0xa8, 0x57, 0x75, 0x6d, 0xc1, 0xb9, 0x73, 0x6f, 0xb5,
	0x69, 0x8a, 0x81, 0xc6, 0x5e, 0xd0, 0xa9, 0x6c, 0x71, 0x69, 0x7c, 0x50, 0xba, 0xf7, 0xec, 0x90,
	0x47, 0x76, 0xef, 0x1b, 0x8f, 0xbe, 0xf1, 0xd7, 0xa8, 0x4d, 0x3e, 0xe9, 0x1f, 0x51, 0x44, 0x3a,
	0x7b, 0x4c, 0xef, 0x2b, 0x0b, 0xd2, 0x43, 0x5d, 0x7a, 0xdd, 0x42, 0x32, 0x09, 0x4e, 0xec, 0xc5,
	0xda, 0x5b, 0xdd, 0x02, 0x9b, 0xd1, 0x1d, 0x17, 0x6d, 0x4c, 0xb6, 0x83, 0xc2, 0xdf, 0x79, 0xfe,
	0xe6, 0x66, 0x9d, 0x92, 0xdb, 0x75, 0x4a, 0x7e, 0xac, 0x53, 0xf2, 0x79, 0x93, 0x8e, 0x6e, 0x37,
	0xe9, 0xe8, 0xdb, 0x26, 0x1d, 0xbd, 0xe7, 0x7f, 0x79, 0xd4, 0x2f, 0xfc, 0x83, 0xac, 0x5c, 0x08,
	0xc4, 0xa7, 0xff, 0xbe, 0x49, 0xf0, 0xab, 0x9a, 0x86, 0xa5, 0x3d, 0xff, 0x19, 0x00, 0x00, 0xff,
	0xff, 0xd8, 0x90, 0x9b, 0x0e, 0x49, 0x02, 0x00, 0x00,
}

func (m *Strategy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Strategy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Strategy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.ConversionRate.Size()
		i -= size
		if _, err := m.ConversionRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTokenConvert(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.Period != 0 {
		i = encodeVarintTokenConvert(dAtA, i, uint64(m.Period))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTokenConvert(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Voucher) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Voucher) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Voucher) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Strategy) > 0 {
		i -= len(m.Strategy)
		copy(dAtA[i:], m.Strategy)
		i = encodeVarintTokenConvert(dAtA, i, uint64(len(m.Strategy)))
		i--
		dAtA[i] = 0x2a
	}
	if m.CreatedTime != 0 {
		i = encodeVarintTokenConvert(dAtA, i, uint64(m.CreatedTime))
		i--
		dAtA[i] = 0x20
	}
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTokenConvert(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTokenConvert(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTokenConvert(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTokenConvert(dAtA []byte, offset int, v uint64) int {
	offset -= sovTokenConvert(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Strategy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTokenConvert(uint64(l))
	}
	if m.Period != 0 {
		n += 1 + sovTokenConvert(uint64(m.Period))
	}
	l = m.ConversionRate.Size()
	n += 1 + l + sovTokenConvert(uint64(l))
	return n
}

func (m *Voucher) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTokenConvert(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTokenConvert(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTokenConvert(uint64(l))
	if m.CreatedTime != 0 {
		n += 1 + sovTokenConvert(uint64(m.CreatedTime))
	}
	l = len(m.Strategy)
	if l > 0 {
		n += 1 + l + sovTokenConvert(uint64(l))
	}
	return n
}

func sovTokenConvert(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTokenConvert(x uint64) (n int) {
	return sovTokenConvert(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Strategy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTokenConvert
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Strategy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Strategy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenConvert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokenConvert
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTokenConvert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Period", wireType)
			}
			m.Period = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenConvert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Period |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConversionRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenConvert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokenConvert
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTokenConvert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ConversionRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTokenConvert(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTokenConvert
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Voucher) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTokenConvert
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Voucher: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Voucher: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenConvert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokenConvert
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTokenConvert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenConvert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokenConvert
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTokenConvert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenConvert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTokenConvert
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTokenConvert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedTime", wireType)
			}
			m.CreatedTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenConvert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Strategy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTokenConvert
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTokenConvert
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTokenConvert
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Strategy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTokenConvert(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTokenConvert
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTokenConvert(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTokenConvert
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTokenConvert
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTokenConvert
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTokenConvert
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTokenConvert
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTokenConvert
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTokenConvert        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTokenConvert          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTokenConvert = fmt.Errorf("proto: unexpected end of group")
)
