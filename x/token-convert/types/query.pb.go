// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tabi/token-convert/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryStrategyRequest is the request type for the Query/Voucher RPC
type QueryStrategyRequest struct {
	StrategyId int64 `protobuf:"varint,1,opt,name=strategy_id,json=strategyId,proto3" json:"strategy_id,omitempty"`
}

func (m *QueryStrategyRequest) Reset()         { *m = QueryStrategyRequest{} }
func (m *QueryStrategyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryStrategyRequest) ProtoMessage()    {}
func (*QueryStrategyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2ad330f982db981, []int{0}
}
func (m *QueryStrategyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStrategyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStrategyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStrategyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStrategyRequest.Merge(m, src)
}
func (m *QueryStrategyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStrategyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStrategyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStrategyRequest proto.InternalMessageInfo

func (m *QueryStrategyRequest) GetStrategyId() int64 {
	if m != nil {
		return m.StrategyId
	}
	return 0
}

// QueryVoucherRequest is the request type for the Query/Voucher RPC
type QueryStrategyResponse struct {
	Id             int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Period         int64  `protobuf:"varint,3,opt,name=period,proto3" json:"period,omitempty"`
	ConversionRate string `protobuf:"bytes,4,opt,name=conversion_rate,json=conversionRate,proto3" json:"conversion_rate,omitempty"`
}

func (m *QueryStrategyResponse) Reset()         { *m = QueryStrategyResponse{} }
func (m *QueryStrategyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStrategyResponse) ProtoMessage()    {}
func (*QueryStrategyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2ad330f982db981, []int{1}
}
func (m *QueryStrategyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStrategyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStrategyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStrategyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStrategyResponse.Merge(m, src)
}
func (m *QueryStrategyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStrategyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStrategyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStrategyResponse proto.InternalMessageInfo

func (m *QueryStrategyResponse) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *QueryStrategyResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *QueryStrategyResponse) GetPeriod() int64 {
	if m != nil {
		return m.Period
	}
	return 0
}

func (m *QueryStrategyResponse) GetConversionRate() string {
	if m != nil {
		return m.ConversionRate
	}
	return ""
}

// QueryVoucherRequest is the request type for the Query/Voucher RPC
type QueryStrategiesRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryStrategiesRequest) Reset()         { *m = QueryStrategiesRequest{} }
func (m *QueryStrategiesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryStrategiesRequest) ProtoMessage()    {}
func (*QueryStrategiesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2ad330f982db981, []int{2}
}
func (m *QueryStrategiesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStrategiesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStrategiesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStrategiesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStrategiesRequest.Merge(m, src)
}
func (m *QueryStrategiesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStrategiesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStrategiesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStrategiesRequest proto.InternalMessageInfo

func (m *QueryStrategiesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryVoucherResponse is the response type for the Query/Voucher RPC
type QueryStrategiesResponse struct {
	Strategies []*Strategy         `protobuf:"bytes,1,rep,name=strategies,proto3" json:"strategies,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryStrategiesResponse) Reset()         { *m = QueryStrategiesResponse{} }
func (m *QueryStrategiesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStrategiesResponse) ProtoMessage()    {}
func (*QueryStrategiesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2ad330f982db981, []int{3}
}
func (m *QueryStrategiesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStrategiesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStrategiesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStrategiesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStrategiesResponse.Merge(m, src)
}
func (m *QueryStrategiesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStrategiesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStrategiesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStrategiesResponse proto.InternalMessageInfo

func (m *QueryStrategiesResponse) GetStrategies() []*Strategy {
	if m != nil {
		return m.Strategies
	}
	return nil
}

func (m *QueryStrategiesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryVoucherRequest is the request type for the Query/Voucher RPC
type QueryVoucherRequest struct {
	VoucherId int64 `protobuf:"varint,1,opt,name=voucher_id,json=voucherId,proto3" json:"voucher_id,omitempty"`
}

func (m *QueryVoucherRequest) Reset()         { *m = QueryVoucherRequest{} }
func (m *QueryVoucherRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVoucherRequest) ProtoMessage()    {}
func (*QueryVoucherRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2ad330f982db981, []int{4}
}
func (m *QueryVoucherRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVoucherRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVoucherRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVoucherRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVoucherRequest.Merge(m, src)
}
func (m *QueryVoucherRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVoucherRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVoucherRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVoucherRequest proto.InternalMessageInfo

func (m *QueryVoucherRequest) GetVoucherId() int64 {
	if m != nil {
		return m.VoucherId
	}
	return 0
}

// QueryVoucherResponse is the response type for the Query/Voucher RPC
type QueryVoucherResponse struct {
	Id          int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Owner       string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	CreatedTime int64  `protobuf:"varint,3,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	StrategyId  int64  `protobuf:"varint,4,opt,name=strategy_id,json=strategyId,proto3" json:"strategy_id,omitempty"`
	Status      string `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *QueryVoucherResponse) Reset()         { *m = QueryVoucherResponse{} }
func (m *QueryVoucherResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVoucherResponse) ProtoMessage()    {}
func (*QueryVoucherResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2ad330f982db981, []int{5}
}
func (m *QueryVoucherResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVoucherResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVoucherResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVoucherResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVoucherResponse.Merge(m, src)
}
func (m *QueryVoucherResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVoucherResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVoucherResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVoucherResponse proto.InternalMessageInfo

func (m *QueryVoucherResponse) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *QueryVoucherResponse) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *QueryVoucherResponse) GetCreatedTime() int64 {
	if m != nil {
		return m.CreatedTime
	}
	return 0
}

func (m *QueryVoucherResponse) GetStrategyId() int64 {
	if m != nil {
		return m.StrategyId
	}
	return 0
}

func (m *QueryVoucherResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

// QueryVouchersRequest is the request type for the Query/Vouchers RPC
type QueryVouchersRequest struct {
	Owner      string             `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryVouchersRequest) Reset()         { *m = QueryVouchersRequest{} }
func (m *QueryVouchersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVouchersRequest) ProtoMessage()    {}
func (*QueryVouchersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2ad330f982db981, []int{6}
}
func (m *QueryVouchersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVouchersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVouchersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVouchersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVouchersRequest.Merge(m, src)
}
func (m *QueryVouchersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVouchersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVouchersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVouchersRequest proto.InternalMessageInfo

func (m *QueryVouchersRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *QueryVouchersRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryVouchersResponse is the response type for the Query/Vouchers RPC
type QueryVouchersResponse struct {
	Vouchers   []*Voucher          `protobuf:"bytes,1,rep,name=vouchers,proto3" json:"vouchers,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryVouchersResponse) Reset()         { *m = QueryVouchersResponse{} }
func (m *QueryVouchersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVouchersResponse) ProtoMessage()    {}
func (*QueryVouchersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2ad330f982db981, []int{7}
}
func (m *QueryVouchersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVouchersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVouchersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVouchersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVouchersResponse.Merge(m, src)
}
func (m *QueryVouchersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVouchersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVouchersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVouchersResponse proto.InternalMessageInfo

func (m *QueryVouchersResponse) GetVouchers() []*Voucher {
	if m != nil {
		return m.Vouchers
	}
	return nil
}

func (m *QueryVouchersResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryUnlockStatusRequest is the request type for the Query/UnlockStatus RPC
type QueryUnlockStatusRequest struct {
	VoucherId int64 `protobuf:"varint,1,opt,name=voucher_id,json=voucherId,proto3" json:"voucher_id,omitempty"`
}

func (m *QueryUnlockStatusRequest) Reset()         { *m = QueryUnlockStatusRequest{} }
func (m *QueryUnlockStatusRequest) String() string { return proto.CompactTextString(m) }
func (*QueryUnlockStatusRequest) ProtoMessage()    {}
func (*QueryUnlockStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2ad330f982db981, []int{8}
}
func (m *QueryUnlockStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUnlockStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUnlockStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUnlockStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUnlockStatusRequest.Merge(m, src)
}
func (m *QueryUnlockStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryUnlockStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUnlockStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUnlockStatusRequest proto.InternalMessageInfo

func (m *QueryUnlockStatusRequest) GetVoucherId() int64 {
	if m != nil {
		return m.VoucherId
	}
	return 0
}

// QueryUnlockStatusResponse is the response type for the Query/UnlockStatus RPC
type QueryUnlockStatusResponse struct {
	CurrentTime      string `protobuf:"bytes,1,opt,name=current_time,json=currentTime,proto3" json:"current_time,omitempty"`
	TabiWithdrawable int64  `protobuf:"varint,2,opt,name=tabi_withdrawable,json=tabiWithdrawable,proto3" json:"tabi_withdrawable,omitempty"`
	TabiBurnable     int64  `protobuf:"varint,3,opt,name=tabi_burnable,json=tabiBurnable,proto3" json:"tabi_burnable,omitempty"`
	VetabiBurnable   int64  `protobuf:"varint,4,opt,name=vetabi_burnable,json=vetabiBurnable,proto3" json:"vetabi_burnable,omitempty"`
	VetabiReturnable int64  `protobuf:"varint,5,opt,name=vetabi_returnable,json=vetabiReturnable,proto3" json:"vetabi_returnable,omitempty"`
}

func (m *QueryUnlockStatusResponse) Reset()         { *m = QueryUnlockStatusResponse{} }
func (m *QueryUnlockStatusResponse) String() string { return proto.CompactTextString(m) }
func (*QueryUnlockStatusResponse) ProtoMessage()    {}
func (*QueryUnlockStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2ad330f982db981, []int{9}
}
func (m *QueryUnlockStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUnlockStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUnlockStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUnlockStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUnlockStatusResponse.Merge(m, src)
}
func (m *QueryUnlockStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUnlockStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUnlockStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUnlockStatusResponse proto.InternalMessageInfo

func (m *QueryUnlockStatusResponse) GetCurrentTime() string {
	if m != nil {
		return m.CurrentTime
	}
	return ""
}

func (m *QueryUnlockStatusResponse) GetTabiWithdrawable() int64 {
	if m != nil {
		return m.TabiWithdrawable
	}
	return 0
}

func (m *QueryUnlockStatusResponse) GetTabiBurnable() int64 {
	if m != nil {
		return m.TabiBurnable
	}
	return 0
}

func (m *QueryUnlockStatusResponse) GetVetabiBurnable() int64 {
	if m != nil {
		return m.VetabiBurnable
	}
	return 0
}

func (m *QueryUnlockStatusResponse) GetVetabiReturnable() int64 {
	if m != nil {
		return m.VetabiReturnable
	}
	return 0
}

func init() {
	proto.RegisterType((*QueryStrategyRequest)(nil), "tabi.token_convert.v1.QueryStrategyRequest")
	proto.RegisterType((*QueryStrategyResponse)(nil), "tabi.token_convert.v1.QueryStrategyResponse")
	proto.RegisterType((*QueryStrategiesRequest)(nil), "tabi.token_convert.v1.QueryStrategiesRequest")
	proto.RegisterType((*QueryStrategiesResponse)(nil), "tabi.token_convert.v1.QueryStrategiesResponse")
	proto.RegisterType((*QueryVoucherRequest)(nil), "tabi.token_convert.v1.QueryVoucherRequest")
	proto.RegisterType((*QueryVoucherResponse)(nil), "tabi.token_convert.v1.QueryVoucherResponse")
	proto.RegisterType((*QueryVouchersRequest)(nil), "tabi.token_convert.v1.QueryVouchersRequest")
	proto.RegisterType((*QueryVouchersResponse)(nil), "tabi.token_convert.v1.QueryVouchersResponse")
	proto.RegisterType((*QueryUnlockStatusRequest)(nil), "tabi.token_convert.v1.QueryUnlockStatusRequest")
	proto.RegisterType((*QueryUnlockStatusResponse)(nil), "tabi.token_convert.v1.QueryUnlockStatusResponse")
}

func init() { proto.RegisterFile("tabi/token-convert/v1/query.proto", fileDescriptor_e2ad330f982db981) }

var fileDescriptor_e2ad330f982db981 = []byte{
	// 855 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x4d, 0x6f, 0xeb, 0x44,
	0x14, 0xed, 0x24, 0x4d, 0x69, 0x6f, 0x4a, 0xe1, 0x0d, 0x79, 0x0f, 0xbf, 0xe8, 0xe1, 0x97, 0x67,
	0xd0, 0xeb, 0x47, 0x1a, 0x9b, 0x94, 0x22, 0x04, 0x1b, 0x44, 0x17, 0x85, 0xee, 0xc0, 0xe5, 0x43,
	0x62, 0x13, 0xc6, 0xf1, 0xc8, 0xb5, 0x9a, 0x78, 0x52, 0xcf, 0x24, 0xa5, 0x2a, 0xdd, 0xb0, 0x05,
	0x21, 0xa4, 0x0a, 0x09, 0x09, 0x76, 0x6c, 0xf8, 0x01, 0xfc, 0x08, 0x96, 0x15, 0x6c, 0x58, 0xa2,
	0x16, 0xf1, 0x3b, 0x90, 0x67, 0xc6, 0x71, 0x92, 0xba, 0xc1, 0x42, 0xec, 0x3c, 0x77, 0xce, 0x9d,
	0x7b, 0xe6, 0xdc, 0x73, 0x47, 0x86, 0x27, 0x82, 0x78, 0xa1, 0x23, 0xd8, 0x31, 0x8d, 0x5a, 0x5d,
	0x16, 0x8d, 0x68, 0x2c, 0x9c, 0x51, 0xdb, 0x39, 0x19, 0xd2, 0xf8, 0xcc, 0x1e, 0xc4, 0x4c, 0x30,
	0x7c, 0x3f, 0x81, 0xd8, 0x12, 0xd2, 0xd1, 0x10, 0x7b, 0xd4, 0xae, 0xd7, 0x02, 0x16, 0x30, 0x89,
	0x70, 0x92, 0x2f, 0x05, 0xae, 0x3f, 0x0a, 0x18, 0x0b, 0x7a, 0xd4, 0x21, 0x83, 0xd0, 0x21, 0x51,
	0xc4, 0x04, 0x11, 0x21, 0x8b, 0xb8, 0xde, 0x7d, 0xd8, 0x65, 0xbc, 0xcf, 0x78, 0x47, 0xa5, 0xa9,
	0x85, 0xde, 0xda, 0x52, 0x2b, 0xc7, 0x23, 0x9c, 0xaa, 0xf2, 0xce, 0xa8, 0xed, 0x51, 0x41, 0xda,
	0xce, 0x80, 0x04, 0x61, 0x24, 0xcf, 0xd1, 0xd8, 0xcd, 0x7c, 0xd2, 0x53, 0x01, 0x05, 0xb5, 0xde,
	0x80, 0xda, 0x07, 0xc9, 0x61, 0x87, 0x22, 0x26, 0x82, 0x06, 0x67, 0x2e, 0x3d, 0x19, 0x52, 0x2e,
	0xf0, 0x63, 0xa8, 0x72, 0x1d, 0xea, 0x84, 0xbe, 0x81, 0x1a, 0x68, 0xa3, 0xec, 0x42, 0x1a, 0x3a,
	0xf0, 0xad, 0x2f, 0xe0, 0xfe, 0x4c, 0x22, 0x1f, 0xb0, 0x88, 0x53, 0xbc, 0x06, 0xa5, 0x71, 0x42,
	0x29, 0xf4, 0x31, 0x86, 0xc5, 0x88, 0xf4, 0xa9, 0x51, 0x6a, 0xa0, 0x8d, 0x15, 0x57, 0x7e, 0xe3,
	0x07, 0xb0, 0x34, 0xa0, 0x71, 0xc8, 0x7c, 0xa3, 0x2c, 0x71, 0x7a, 0x85, 0xd7, 0xe1, 0x39, 0x45,
	0x8f, 0x87, 0x2c, 0xea, 0x24, 0x07, 0x1b, 0x8b, 0x32, 0x6d, 0x2d, 0x0b, 0xbb, 0x44, 0x50, 0xeb,
	0x33, 0x78, 0x30, 0x59, 0x3d, 0xa4, 0x3c, 0x25, 0xbe, 0x0f, 0x90, 0xe9, 0x21, 0x69, 0x54, 0x77,
	0x9e, 0xda, 0x5a, 0xca, 0x44, 0x3c, 0x5b, 0xf5, 0x4e, 0x8b, 0x67, 0xbf, 0x4f, 0x02, 0xaa, 0x73,
	0xdd, 0x89, 0x4c, 0xeb, 0x27, 0x04, 0x2f, 0xde, 0x2a, 0xa1, 0xaf, 0xf8, 0x36, 0xa4, 0x4a, 0x84,
	0x94, 0x1b, 0xa8, 0x51, 0xde, 0xa8, 0xee, 0x3c, 0xb6, 0x73, 0x6d, 0x60, 0x8f, 0xf5, 0x99, 0x48,
	0xc1, 0xef, 0x4e, 0x91, 0x2c, 0x49, 0x92, 0xeb, 0xff, 0x4a, 0x52, 0x55, 0x9f, 0x62, 0xb9, 0x0b,
	0x2f, 0x48, 0x92, 0x1f, 0xb3, 0x61, 0xf7, 0x88, 0xc6, 0xa9, 0x08, 0x2f, 0x01, 0x8c, 0x54, 0x24,
	0x6b, 0xde, 0x8a, 0x8e, 0x1c, 0xf8, 0xd6, 0xf7, 0x48, 0x77, 0x7d, 0x9c, 0x76, 0x47, 0xef, 0x6a,
	0x50, 0x61, 0xa7, 0x11, 0x8d, 0x75, 0xf3, 0xd4, 0x02, 0x3f, 0x81, 0xd5, 0x6e, 0x4c, 0x89, 0xa0,
	0x7e, 0x47, 0x84, 0x7d, 0xaa, 0x7b, 0x58, 0xd5, 0xb1, 0x0f, 0xc3, 0x3e, 0x9d, 0xb5, 0xcf, 0xe2,
	0xac, 0x7d, 0x12, 0x07, 0x70, 0x41, 0xc4, 0x90, 0x1b, 0x15, 0x79, 0xb4, 0x5e, 0x59, 0xdf, 0xcc,
	0x50, 0x1b, 0xf7, 0xd5, 0x4e, 0xa9, 0x24, 0xec, 0x56, 0xf6, 0x8c, 0xdf, 0x7e, 0x69, 0xd5, 0xb4,
	0x60, 0xef, 0xf8, 0x7e, 0x4c, 0x39, 0x3f, 0x14, 0x71, 0x18, 0x05, 0x29, 0xc9, 0xfd, 0x1c, 0x89,
	0xff, 0x8b, 0x0f, 0x7e, 0x44, 0xda, 0xe8, 0x19, 0x21, 0x2d, 0xd6, 0x5b, 0xb0, 0xac, 0x25, 0x4d,
	0x3d, 0x60, 0xde, 0xe1, 0x81, 0x54, 0xe6, 0x31, 0xfe, 0xff, 0x33, 0xc0, 0x9b, 0x60, 0x48, 0x76,
	0x1f, 0x45, 0x3d, 0xd6, 0x3d, 0x3e, 0x94, 0x22, 0x16, 0x74, 0xc1, 0xdf, 0x08, 0x1e, 0xe6, 0xe4,
	0xea, 0xdb, 0x25, 0x4d, 0x1e, 0xc6, 0x31, 0x8d, 0x84, 0x6a, 0xb2, 0x94, 0xdd, 0xad, 0xea, 0x98,
	0x6c, 0x72, 0x13, 0xee, 0x25, 0xf7, 0xed, 0x9c, 0x86, 0xe2, 0xc8, 0x8f, 0xc9, 0x29, 0xf1, 0x7a,
	0x6a, 0xcc, 0xcb, 0xee, 0xf3, 0xc9, 0xc6, 0x27, 0x13, 0x71, 0xfc, 0x32, 0x3c, 0x2b, 0xc1, 0xde,
	0x30, 0x8e, 0x24, 0x50, 0xb9, 0x66, 0x35, 0x09, 0xee, 0xe9, 0x58, 0x32, 0xff, 0x23, 0x3a, 0x0d,
	0x53, 0xd6, 0x59, 0x53, 0xe1, 0x31, 0xb0, 0x09, 0xf7, 0x34, 0x30, 0xa6, 0x22, 0x85, 0x56, 0x54,
	0x69, 0xb5, 0xe1, 0x8e, 0xe3, 0x3b, 0x5f, 0x2f, 0x41, 0x45, 0x5e, 0x14, 0xff, 0x80, 0x60, 0x39,
	0x1d, 0x48, 0xdc, 0xbc, 0xa3, 0x5b, 0x79, 0xef, 0x61, 0x7d, 0xbb, 0x18, 0x58, 0x89, 0x67, 0xed,
	0x7e, 0xf9, 0xfb, 0x5f, 0x97, 0x25, 0x1b, 0x6f, 0x3b, 0x9f, 0xdf, 0x7e, 0x86, 0xb3, 0x77, 0xc0,
	0x39, 0x9f, 0x18, 0x92, 0x0b, 0x7c, 0x89, 0x00, 0xb2, 0xd7, 0x06, 0xb7, 0x0a, 0x94, 0xcc, 0x1e,
	0xbe, 0xba, 0x5d, 0x14, 0xae, 0x39, 0x3e, 0x95, 0x1c, 0x1b, 0xd8, 0x9c, 0xcf, 0x11, 0x7f, 0x87,
	0xe0, 0x19, 0x6d, 0x60, 0xbc, 0x35, 0xaf, 0xc6, 0xf4, 0x1b, 0x54, 0x6f, 0x16, 0xc2, 0x6a, 0x32,
	0x6d, 0x49, 0xa6, 0x89, 0x37, 0xf3, 0xc8, 0xa4, 0x53, 0xe3, 0x9c, 0x67, 0x76, 0xbe, 0xc0, 0x5f,
	0x21, 0x58, 0x4e, 0x67, 0x12, 0x17, 0x29, 0xc6, 0x0b, 0xf5, 0x72, 0x76, 0xcc, 0xad, 0x57, 0x24,
	0x35, 0x13, 0x3f, 0x9a, 0x47, 0x0d, 0xff, 0x8c, 0x60, 0x75, 0x72, 0x8e, 0xb0, 0x33, 0xaf, 0x48,
	0xce, 0xb4, 0xd6, 0x5f, 0x2d, 0x9e, 0xa0, 0x99, 0xbd, 0x2e, 0x99, 0x39, 0xb8, 0x95, 0xc7, 0x6c,
	0x32, 0x63, 0x4a, 0xb8, 0xbd, 0xf7, 0x7e, 0xbd, 0x36, 0xd1, 0xd5, 0xb5, 0x89, 0xfe, 0xbc, 0x36,
	0xd1, 0xb7, 0x37, 0xe6, 0xc2, 0xd5, 0x8d, 0xb9, 0xf0, 0xc7, 0x8d, 0xb9, 0xf0, 0xa9, 0x1d, 0x84,
	0xe2, 0x68, 0xe8, 0xd9, 0x5d, 0xd6, 0x77, 0x12, 0x32, 0x3d, 0xe2, 0x71, 0xf9, 0x71, 0xab, 0x80,
	0x38, 0x1b, 0x50, 0xee, 0x2d, 0xc9, 0x7f, 0x88, 0xd7, 0xfe, 0x09, 0x00, 0x00, 0xff, 0xff, 0x7a,
	0xed, 0x70, 0x47, 0x25, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	Strategy(ctx context.Context, in *QueryStrategyRequest, opts ...grpc.CallOption) (*QueryStrategyResponse, error)
	Strategies(ctx context.Context, in *QueryStrategiesRequest, opts ...grpc.CallOption) (*QueryStrategiesResponse, error)
	// Voucher returns the info about the voucher with the given id
	Voucher(ctx context.Context, in *QueryVoucherRequest, opts ...grpc.CallOption) (*QueryVoucherResponse, error)
	// Vouchers returns the list of vouchers owned by the given address
	Vouchers(ctx context.Context, in *QueryVouchersRequest, opts ...grpc.CallOption) (*QueryVouchersResponse, error)
	// UnlockStatus returns the info about the amount of tabi withdrawable and burnable as well as vetabi burnable and
	// returnable
	UnlockStatus(ctx context.Context, in *QueryUnlockStatusRequest, opts ...grpc.CallOption) (*QueryUnlockStatusResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Strategy(ctx context.Context, in *QueryStrategyRequest, opts ...grpc.CallOption) (*QueryStrategyResponse, error) {
	out := new(QueryStrategyResponse)
	err := c.cc.Invoke(ctx, "/tabi.token_convert.v1.Query/Strategy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Strategies(ctx context.Context, in *QueryStrategiesRequest, opts ...grpc.CallOption) (*QueryStrategiesResponse, error) {
	out := new(QueryStrategiesResponse)
	err := c.cc.Invoke(ctx, "/tabi.token_convert.v1.Query/Strategies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Voucher(ctx context.Context, in *QueryVoucherRequest, opts ...grpc.CallOption) (*QueryVoucherResponse, error) {
	out := new(QueryVoucherResponse)
	err := c.cc.Invoke(ctx, "/tabi.token_convert.v1.Query/Voucher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Vouchers(ctx context.Context, in *QueryVouchersRequest, opts ...grpc.CallOption) (*QueryVouchersResponse, error) {
	out := new(QueryVouchersResponse)
	err := c.cc.Invoke(ctx, "/tabi.token_convert.v1.Query/Vouchers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UnlockStatus(ctx context.Context, in *QueryUnlockStatusRequest, opts ...grpc.CallOption) (*QueryUnlockStatusResponse, error) {
	out := new(QueryUnlockStatusResponse)
	err := c.cc.Invoke(ctx, "/tabi.token_convert.v1.Query/UnlockStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	Strategy(context.Context, *QueryStrategyRequest) (*QueryStrategyResponse, error)
	Strategies(context.Context, *QueryStrategiesRequest) (*QueryStrategiesResponse, error)
	// Voucher returns the info about the voucher with the given id
	Voucher(context.Context, *QueryVoucherRequest) (*QueryVoucherResponse, error)
	// Vouchers returns the list of vouchers owned by the given address
	Vouchers(context.Context, *QueryVouchersRequest) (*QueryVouchersResponse, error)
	// UnlockStatus returns the info about the amount of tabi withdrawable and burnable as well as vetabi burnable and
	// returnable
	UnlockStatus(context.Context, *QueryUnlockStatusRequest) (*QueryUnlockStatusResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Strategy(ctx context.Context, req *QueryStrategyRequest) (*QueryStrategyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Strategy not implemented")
}
func (*UnimplementedQueryServer) Strategies(ctx context.Context, req *QueryStrategiesRequest) (*QueryStrategiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Strategies not implemented")
}
func (*UnimplementedQueryServer) Voucher(ctx context.Context, req *QueryVoucherRequest) (*QueryVoucherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Voucher not implemented")
}
func (*UnimplementedQueryServer) Vouchers(ctx context.Context, req *QueryVouchersRequest) (*QueryVouchersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Vouchers not implemented")
}
func (*UnimplementedQueryServer) UnlockStatus(ctx context.Context, req *QueryUnlockStatusRequest) (*QueryUnlockStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlockStatus not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Strategy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStrategyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Strategy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabi.token_convert.v1.Query/Strategy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Strategy(ctx, req.(*QueryStrategyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Strategies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStrategiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Strategies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabi.token_convert.v1.Query/Strategies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Strategies(ctx, req.(*QueryStrategiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Voucher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVoucherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Voucher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabi.token_convert.v1.Query/Voucher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Voucher(ctx, req.(*QueryVoucherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Vouchers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVouchersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Vouchers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabi.token_convert.v1.Query/Vouchers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Vouchers(ctx, req.(*QueryVouchersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UnlockStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUnlockStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UnlockStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tabi.token_convert.v1.Query/UnlockStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UnlockStatus(ctx, req.(*QueryUnlockStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tabi.token_convert.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Strategy",
			Handler:    _Query_Strategy_Handler,
		},
		{
			MethodName: "Strategies",
			Handler:    _Query_Strategies_Handler,
		},
		{
			MethodName: "Voucher",
			Handler:    _Query_Voucher_Handler,
		},
		{
			MethodName: "Vouchers",
			Handler:    _Query_Vouchers_Handler,
		},
		{
			MethodName: "UnlockStatus",
			Handler:    _Query_UnlockStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tabi/token-convert/v1/query.proto",
}

func (m *QueryStrategyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStrategyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStrategyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StrategyId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.StrategyId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryStrategyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStrategyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStrategyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConversionRate) > 0 {
		i -= len(m.ConversionRate)
		copy(dAtA[i:], m.ConversionRate)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ConversionRate)))
		i--
		dAtA[i] = 0x22
	}
	if m.Period != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Period))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryStrategiesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStrategiesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStrategiesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStrategiesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStrategiesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStrategiesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Strategies) > 0 {
		for iNdEx := len(m.Strategies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Strategies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryVoucherRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVoucherRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVoucherRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VoucherId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.VoucherId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryVoucherResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVoucherResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVoucherResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x2a
	}
	if m.StrategyId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.StrategyId))
		i--
		dAtA[i] = 0x20
	}
	if m.CreatedTime != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.CreatedTime))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryVouchersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVouchersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVouchersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryVouchersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVouchersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVouchersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Vouchers) > 0 {
		for iNdEx := len(m.Vouchers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Vouchers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryUnlockStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUnlockStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUnlockStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VoucherId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.VoucherId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryUnlockStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUnlockStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUnlockStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VetabiReturnable != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.VetabiReturnable))
		i--
		dAtA[i] = 0x28
	}
	if m.VetabiBurnable != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.VetabiBurnable))
		i--
		dAtA[i] = 0x20
	}
	if m.TabiBurnable != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TabiBurnable))
		i--
		dAtA[i] = 0x18
	}
	if m.TabiWithdrawable != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TabiWithdrawable))
		i--
		dAtA[i] = 0x10
	}
	if len(m.CurrentTime) > 0 {
		i -= len(m.CurrentTime)
		copy(dAtA[i:], m.CurrentTime)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CurrentTime)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryStrategyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StrategyId != 0 {
		n += 1 + sovQuery(uint64(m.StrategyId))
	}
	return n
}

func (m *QueryStrategyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Period != 0 {
		n += 1 + sovQuery(uint64(m.Period))
	}
	l = len(m.ConversionRate)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStrategiesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStrategiesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Strategies) > 0 {
		for _, e := range m.Strategies {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVoucherRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VoucherId != 0 {
		n += 1 + sovQuery(uint64(m.VoucherId))
	}
	return n
}

func (m *QueryVoucherResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.CreatedTime != 0 {
		n += 1 + sovQuery(uint64(m.CreatedTime))
	}
	if m.StrategyId != 0 {
		n += 1 + sovQuery(uint64(m.StrategyId))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVouchersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVouchersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Vouchers) > 0 {
		for _, e := range m.Vouchers {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUnlockStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VoucherId != 0 {
		n += 1 + sovQuery(uint64(m.VoucherId))
	}
	return n
}

func (m *QueryUnlockStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CurrentTime)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.TabiWithdrawable != 0 {
		n += 1 + sovQuery(uint64(m.TabiWithdrawable))
	}
	if m.TabiBurnable != 0 {
		n += 1 + sovQuery(uint64(m.TabiBurnable))
	}
	if m.VetabiBurnable != 0 {
		n += 1 + sovQuery(uint64(m.VetabiBurnable))
	}
	if m.VetabiReturnable != 0 {
		n += 1 + sovQuery(uint64(m.VetabiReturnable))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryStrategyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStrategyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStrategyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrategyId", wireType)
			}
			m.StrategyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StrategyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStrategyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStrategyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStrategyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Period", wireType)
			}
			m.Period = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Period |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConversionRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConversionRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStrategiesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStrategiesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStrategiesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStrategiesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStrategiesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStrategiesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Strategies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Strategies = append(m.Strategies, &Strategy{})
			if err := m.Strategies[len(m.Strategies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVoucherRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVoucherRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVoucherRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoucherId", wireType)
			}
			m.VoucherId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoucherId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVoucherResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVoucherResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVoucherResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedTime", wireType)
			}
			m.CreatedTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrategyId", wireType)
			}
			m.StrategyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StrategyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVouchersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVouchersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVouchersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVouchersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVouchersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVouchersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vouchers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vouchers = append(m.Vouchers, &Voucher{})
			if err := m.Vouchers[len(m.Vouchers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUnlockStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUnlockStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUnlockStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoucherId", wireType)
			}
			m.VoucherId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoucherId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUnlockStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUnlockStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUnlockStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TabiWithdrawable", wireType)
			}
			m.TabiWithdrawable = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TabiWithdrawable |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TabiBurnable", wireType)
			}
			m.TabiBurnable = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TabiBurnable |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VetabiBurnable", wireType)
			}
			m.VetabiBurnable = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VetabiBurnable |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VetabiReturnable", wireType)
			}
			m.VetabiReturnable = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VetabiReturnable |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
